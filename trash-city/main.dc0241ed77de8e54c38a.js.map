{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/enums.ts","webpack:///./src/GameUI/components/Default/ProgressBar.jsx","webpack:///./src/GameUI/components/GameScreens/LoadingScreen/index.jsx","webpack:///./src/actions/appActions.js","webpack:///./src/GameUI/components/Default/Button.jsx","webpack:///./src/GameUI/components/GameScreens/MainMenu/index.jsx","webpack:///./src/GameUI/components/GameScreens/SettingsMenu/index.jsx","webpack:///./src/actions/settingsActions.js","webpack:///./src/reducers/gameReducer.js","webpack:///./src/reducers/appReducer.js","webpack:///./src/reducers/settingsReducer.js","webpack:///./src/reducers/loadingReducer.js","webpack:///./src/reducers/levelReducer.js","webpack:///./src/reducers/index.js","webpack:///./src/store.js","webpack:///./src/Game/GameLoop.ts","webpack:///./src/Game/levels/levels.ts","webpack:///./src/actions/loaderActions.js","webpack:///./src/Game/AssetLoader.ts","webpack:///./src/Game/gameObjects/Position.ts","webpack:///./src/Game/BoxCollider.ts","webpack:///./src/Game/gameObjects/objects/Player.ts","webpack:///./src/utils/random.js","webpack:///./src/Game/gameObjects/objects/Civilian.ts","webpack:///./src/Game/gameObjects/objects/CivilianSpawnPoint.ts","webpack:///./src/Game/gameObjects/objects/Trash.ts","webpack:///./src/Game/gameObjects/objects/WaterTile.ts","webpack:///./src/Game/gameObjects/objects/FilterSystem.ts","webpack:///./src/Game/gameObjects/index.ts","webpack:///./src/Game/GameObjectFactory.ts","webpack:///./src/Game/TileMap.ts","webpack:///./src/Game/layers/TrashLayer.ts","webpack:///./src/Game/layers/TileLayer.ts","webpack:///./src/Game/layers/GameObjectLayer.ts","webpack:///./src/Game/layers/CivilianLayer.ts","webpack:///./src/Game/Level.ts","webpack:///./src/Game/InputHandler.ts","webpack:///./src/actions/gameActions.js","webpack:///./src/actions/levelActions.js","webpack:///./src/Game/Game.ts","webpack:///./src/GameUI/components/GameScreens/LevelMenu/index.jsx","webpack:///./src/GameUI/components/GameScreens/Game/Popups/Pause.jsx","webpack:///./src/utils/displayTime.js","webpack:///./src/GameUI/components/GameScreens/Game/Popups/Score.jsx","webpack:///./src/GameUI/components/GameScreens/Game/Popups/Info.jsx","webpack:///./src/GameUI/components/GameScreens/Game/Popups/index.jsx","webpack:///./src/GameUI/components/GameScreens/Game/index.jsx","webpack:///./src/utils/numberFormatter.js","webpack:///./src/GameUI/components/GameScreens/index.jsx","webpack:///./src/GameUI/components/App.jsx","webpack:///./src/index.ts","webpack:///./src/GameUI/index.tsx"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","Screens","Popups","GameEventIds","TileLayers","ObjectDirection","Keys","Flags","progress","description","className","style","width","render","LoadingScreen","state","loading","dispatch","Component","screen","type","payload","onClick","children","fullwidth","classes","join","role","onKeyDown","tabIndex","setScreen","LevelMenu","SettingsMenu","location","href","MainMenu","setVolume","v","volume","orientation","onChange","this","tooltip","min","max","step","settings","defaultState","active","currentPopup","None","score","time","activeScreen","Loading","game","action","app","level","reducers","fps","callback","isPlaying","frame","start","tref","requestAnimationFrame","loop","pause","cancelAnimationFrame","reset","startLoading","onLoading","percentage","loadingCompleted","tilesets","init","loader","onStart","add","onLoad","onComplete","forEach","map","spritesheet","a","tileset","xml","tile","mapId","parseInt","$","id","image","source","load","store","e","getAssetByMapId","find","Error","getAssetById","resources","textures","getAnimationById","animations","x","y","speed","xSpeed","ySpeed","setDirection","direction","Up","Right","Down","Left","height","position","isInRadius","otherBoxCollider","radius","halfWidth","halfHeight","arrowKeyDown","previousArrowKeyDown","keysDown","previousKeysDown","initAnimation","sprite","boxCollider","pivot","animationSpeed","animation","assetLoader","update","inputHandler","keyIsPressed","ArrowUp","currentLevel","collisionMap","objectCollides","ArrowRight","ArrowDown","ArrowLeft","SpaceBar","trashLayer","pickupTrash","gameObjectLayer","repairFilter","previousDirection","toLowerCase","play","currentFrame","stop","destroy","resume","Math","floor","random","directions","eventsMap","tilesWithIdAround","SidewalkArea","includes","playing","trySpawnTrash","spawnDelay","spawnChance","gameLoop","nearestEventWithId","civilianLayer","spawnCivilian","rotation","PI","texture","tileX","tileY","tileSize","isDirty","textureDirty","setIsDirty","isWaterTile","filterActive","previousFilterActive","filterBreakDownDuration","setWaterDirty","activateFilter","isFilterSystem","Player","Civilian","CivilianSpawnPoint","Trash","WaterTile","FilterSystem","props","tiles","leftTileX","bottomTileY","rightTileX","topTileY","tileId","bottomY","topY","leftX","rightX","getRandomTileById","initialTrashAmount","trashSpawnChance","trashMaxSpawnChance","trashIncreaseSpawnChance","trashSpawnIncreaseDelay","maxTrash","trash","index","spawnTrash","gameObjectFactory","container","addChild","stage","trashIdsInRadius","trashItem","filter","removeChild","layers","tileMapLayers","tileMap","Array","fill","flippedHorizontally","FlippedHorizontally","flippedVertically","FlippedVertically","flippedDiagonally","FlippedDiagonally","gameObjects","civilianSpawnDelay","civilianSpawnChance","activeGameObjects","filterSystem","objectId","gameObject","maxCivilians","civilians","civilian","minTrashToWin","objectsMap","tileLayer","calculateTrashScore","calculateFilterScore","getScore","setScore","keyCode","onKeyUp","document","addEventListener","showPopup","popup","pauseGame","Pause","resumeGame","levelInit","setLevelData","Info","size","pickLevel","Game","foundLevel","goal","startGame","Score","getState","resize","nvw","nvh","vpw","innerWidth","vph","innerHeight","renderer","scale","set","gameId","getElementById","backgroundColor","SCALE_MODE","NEAREST","appendChild","view","LevelItem","src","thumbnail","alt","seconds","sec","toString","padStart","GamePopups","icon","num","App"],"mappings":"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","file":"main.dc0241ed77de8e54c38a.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/trash-city\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([519,1]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","enum Screens {\r\n  Loading,\r\n  MainMenu,\r\n  LevelMenu,\r\n  SettingsMenu,\r\n  Game\r\n}\r\n\r\nenum Popups {\r\n  None,\r\n  Pause,\r\n  Score,\r\n  Info\r\n}\r\n\r\nenum GameEventIds {\r\n  SidewalkArea = 1,\r\n  CivilianSpawnPoint = 2,\r\n  WaterTile = 3,\r\n  FilterSystem = 4\r\n}\r\n\r\nenum TileLayers {\r\n  Background,\r\n  TopAssets1,\r\n  TopAssets2\r\n}\r\n\r\nenum ObjectDirection {\r\n  Up,\r\n  Down,\r\n  Left,\r\n  Right\r\n}\r\n\r\nenum Keys {\r\n  ArrowUp = 38,\r\n  ArrowDown = 40,\r\n  ArrowLeft = 37,\r\n  ArrowRight = 39,\r\n  SpaceBar = 32\r\n}\r\n\r\nenum Flags {\r\n  FlippedHorizontally = 0x80000000,\r\n  FlippedVertically = 0x40000000,\r\n  FlippedDiagonally = 0x20000000\r\n}\r\n\r\nexport { Screens, Popups, GameEventIds, ObjectDirection, Keys, TileLayers, Flags };\r\n","import React from 'react';\r\n\r\nconst ProgressBar = ({ progress, description }) => {\r\n  return (\r\n    <div className=\"progress-bar\">\r\n      <div className=\"progress-bar-display\" style={{ width: `${progress}%` }} />\r\n      <div className=\"progress-bar-text\">{description ? description(progress) : progress}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProgressBar;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport ProgressBar from '../../Default/ProgressBar';\r\n\r\n@connect(\r\n  state => ({\r\n    progress: state.loading.progress\r\n  }),\r\n  dispatch => ({\r\n    dispatch\r\n  })\r\n)\r\nclass LoadingScreen extends React.Component {\r\n  render() {\r\n    const { progress } = this.props;\r\n    return (\r\n      <div className=\"game-screen-content\">\r\n        <div className=\"game-screen-item game-screen-title\">Textures laden</div>\r\n        <div className=\"game-screen-item\">\r\n          <ProgressBar progress={progress} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoadingScreen;\r\n","export const setScreen = screen => {\r\n    return {\r\n        type: 'SET_SCREEN',\r\n        payload: screen\r\n    };\r\n};\r\n","import React from 'react';\r\n\r\nconst Button = ({ onClick, children, fullwidth, className }) => {\r\n  const classes = ['button'];\r\n\r\n  if (fullwidth) {\r\n    classes.push('full-width');\r\n  }\r\n\r\n  return (\r\n    <div\r\n      onClick={onClick}\r\n      className={`${classes.join(' ')} ${className}`}\r\n      role=\"button\"\r\n      onKeyDown={onClick}\r\n      tabIndex={0}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { setScreen } from '../../../../actions/appActions';\r\nimport { Screens } from '../../../../enums.ts';\r\nimport Button from '../../Default/Button';\r\n\r\n@connect(dispatch => ({\r\n  dispatch\r\n}))\r\nclass MainMenu extends React.Component {\r\n  setScreen = screen => {\r\n    const { dispatch } = this.props;\r\n    dispatch(setScreen(screen));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"game-screen-content\">\r\n        <div className=\"game-screen-item game-screen-title\">Hoofdmenu</div>\r\n        <div className=\"game-screen-item\">\r\n          <Button\r\n            className=\"main-menu-levels-button\"\r\n            fullwidth\r\n            onClick={() => this.setScreen(Screens.LevelMenu)}\r\n          >\r\n            Levels\r\n          </Button>\r\n        </div>\r\n        <div className=\"game-screen-item\">\r\n          <Button\r\n            className=\"main-menu-settings-button\"\r\n            fullwidth\r\n            onClick={() => this.setScreen(Screens.SettingsMenu)}\r\n          >\r\n            Opties\r\n          </Button>\r\n        </div>\r\n        <div className=\"game-screen-item\">\r\n          <Button\r\n            className=\"main-menu-close-button\"\r\n            fullwidth\r\n            onClick={() => {\r\n              window.location.href = '/';\r\n            }}\r\n          >\r\n            Afsluiten\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MainMenu;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Slider from 'react-rangeslider';\r\n\r\nimport { setVolume } from '../../../../actions/settingsActions';\r\nimport { setScreen } from '../../../../actions/appActions';\r\nimport { Screens } from '../../../../enums.ts';\r\nimport Button from '../../Default/Button';\r\n\r\n@connect(\r\n  state => ({\r\n    settings: state.settings\r\n  }),\r\n  dispatch => ({\r\n    dispatch\r\n  })\r\n)\r\nclass SettingsMenu extends React.Component {\r\n  setVolume = v => {\r\n    const { dispatch } = this.props;\r\n    dispatch(setVolume(v));\r\n  };\r\n\r\n  setScreen = screen => {\r\n    const { dispatch } = this.props;\r\n    dispatch(setScreen(screen));\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      settings: { volume }\r\n    } = this.props;\r\n\r\n    return (\r\n      <div className=\"game-screen-content settings-menu\">\r\n        <div className=\"game-screen-item game-screen-title\">Opties</div>\r\n        <div className=\"game-screen-item\">\r\n          <span>{`Volume: ${volume}`}</span>\r\n          <Slider\r\n            className=\"settings-volume-rangeslider\"\r\n            value={volume}\r\n            orientation=\"horizontal\"\r\n            onChange={this.setVolume}\r\n            tooltip={false}\r\n            min={0}\r\n            max={100}\r\n            step={1}\r\n          />\r\n        </div>\r\n        <div className=\"game-screen-item\">\r\n          <Button\r\n            className=\"settings-menu-back-button\"\r\n            fullwidth\r\n            onClick={() => this.setScreen(Screens.MainMenu)}\r\n          >\r\n            Terug\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SettingsMenu;\r\n","export function setVolume(v) {\r\n  return {\r\n    type: 'SET_VOLUME',\r\n    payload: v\r\n  };\r\n}\r\n","import { Popups } from '../enums.ts';\r\n\r\nconst defaultState = {\r\n  active: false,\r\n  currentPopup: Popups.None,\r\n  score: 50,\r\n  time: 0\r\n};\r\n\r\nexport default (state = defaultState, action) => {\r\n  switch (action.type) {\r\n    case 'SET_TIME':\r\n      return {\r\n        ...state,\r\n        time: action.payload\r\n      };\r\n    case 'SET_SCORE':\r\n      return {\r\n        ...state,\r\n        score: action.payload\r\n      };\r\n    case 'RESUME_GAME':\r\n      return {\r\n        ...state,\r\n        active: true\r\n      };\r\n    case 'PAUSE_GAME':\r\n      return {\r\n        ...state,\r\n        active: false\r\n      };\r\n    case 'SHOW_POPUP':\r\n      return {\r\n        ...state,\r\n        currentPopup: action.payload\r\n      };\r\n    case 'HIDE_POPUP':\r\n      return {\r\n        ...state,\r\n        currentPopup: Popups.None\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { Screens } from '../enums.ts';\r\n\r\nconst defaultState = {\r\n  activeScreen: Screens.Loading\r\n};\r\n\r\nexport default (state = defaultState, action) => {\r\n  switch (action.type) {\r\n    case 'SET_SCREEN':\r\n      return {\r\n        ...state,\r\n        activeScreen: action.payload\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","const defaultState = {\r\n  volume: 80\r\n};\r\n\r\nexport default (state = defaultState, action) => {\r\n  switch (action.type) {\r\n    case 'SET_VOLUME':\r\n      return {\r\n        ...state,\r\n        volume: action.payload\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","const defaultState = {\r\n    progress: 0\r\n};\r\n\r\nexport default (state = defaultState, action) => {\r\n    switch (action.type) {\r\n        case 'START_LOADING':\r\n            return {\r\n                ...state,\r\n                progress: 0\r\n            };\r\n\r\n        case 'ON_LOADING':\r\n            return {\r\n                ...state,\r\n                progress: action.payload\r\n            };\r\n\r\n        case 'ON_LOADED':\r\n            return {\r\n                ...state,\r\n                progress: 100\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","const defaultState = {};\r\n\r\nexport default (state = defaultState, action) => {\r\n  switch (action.type) {\r\n    case 'SET_LEVEL_DATA':\r\n      return {\r\n        ...state,\r\n        ...action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import game from './gameReducer';\r\nimport app from './appReducer';\r\nimport settings from './settingsReducer';\r\nimport loading from './loadingReducer';\r\nimport level from './levelReducer';\r\n\r\nexport default {\r\n  game,\r\n  app,\r\n  settings,\r\n  loading,\r\n  level\r\n};\r\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport logger from 'redux-logger';\r\n\r\nimport reducers from './reducers';\r\n\r\nexport default createStore(combineReducers({ ...reducers }), applyMiddleware(thunk /* , logger */));\r\n","class GameLoop {\r\n  private isPlaying: boolean = false;\r\n  private tref;\r\n  private callback: Function;\r\n  public frame: number = -1;\r\n  public fps: number;\r\n\r\n  constructor(fps: number, callback: Function) {\r\n    this.fps = fps;\r\n    this.callback = callback;\r\n  }\r\n\r\n  // Start gameloop with requestAnimationFrame\r\n  public start = (): void => {\r\n    if (!this.isPlaying) {\r\n      this.isPlaying = true;\r\n      this.tref = requestAnimationFrame(this.loop);\r\n    }\r\n  };\r\n\r\n  // Pause gameloop\r\n  public pause = (): void => {\r\n    if (this.isPlaying) {\r\n      cancelAnimationFrame(this.tref);\r\n      this.isPlaying = false;\r\n    }\r\n  };\r\n\r\n  // Reset gameloop\r\n  public reset = (): void => {\r\n    this.pause();\r\n    this.frame = -1;\r\n  };\r\n\r\n  // Actual gameloop with callback\r\n  private loop = (): void => {\r\n    this.frame++;\r\n    this.tref = requestAnimationFrame(this.loop);\r\n    this.callback(this.frame);\r\n  };\r\n}\r\n\r\nexport default GameLoop;\r\n","import IConfigLevel from './IConfigLevel';\r\nimport level1 from './level1/level1.json';\r\n\r\n// Get all levels and create array\r\nconst levels: IConfigLevel[] = [level1];\r\n\r\nexport default levels;\r\n","import { Screens } from '../enums.ts';\r\nimport { setScreen } from './appActions';\r\n\r\nexport const startLoading = () => {\r\n  return {\r\n    type: 'START_LOADING'\r\n  };\r\n};\r\n\r\nexport const onLoading = percentage => {\r\n  return {\r\n    type: 'ON_LOADING',\r\n    payload: percentage\r\n  };\r\n};\r\n\r\nconst onLoaded = () => {\r\n  return {\r\n    type: 'ON_LOADED'\r\n  };\r\n};\r\n\r\nexport const loadingCompleted = () => {\r\n  return dispatch => {\r\n    dispatch(onLoaded());\r\n    dispatch(setScreen(Screens.MainMenu));\r\n  };\r\n};\r\n","import * as PIXI from 'pixi.js';\r\nimport axios from 'axios';\r\nimport { parseStringPromise } from 'xml2js';\r\n\r\nimport store from '../store';\r\n\r\nimport { startLoading, onLoading, loadingCompleted } from '../actions/loaderActions';\r\n\r\nimport spritesheetTilesetMap from './assets/spritesheet_tileset_map.json';\r\n\r\nclass AssetLoader {\r\n  private loader: PIXI.Loader;\r\n  private tilesets: object = {};\r\n\r\n  public init = async (): Promise<void> => {\r\n    // Get new PIXI Loader\r\n    this.loader = new PIXI.Loader();\r\n\r\n    // Set events\r\n    this.loader.onStart.add(this.onStart);\r\n    this.loader.onLoad.add(this.onLoad);\r\n    this.loader.onComplete.add(this.onComplete);\r\n\r\n    // Map 'TexturePacker' ids to 'Tiled' tile ids and add 'TexturePacker' tilesets to loader.\r\n    // These tile maps are based on '/src/Game/assets/spritesheet_tileset_map.json'.\r\n    // To tell Pixi what sprites to load and to retrieve the right sprites from created maps in 'Tiled'.\r\n    await spritesheetTilesetMap.forEach(async map => {\r\n      // Add 'TexturePacker' tileset to loader\r\n      this.loader.add(map.spritesheet);\r\n      const tileset = await axios.get(map.tileset);\r\n\r\n      // Parse 'Tiled' tileset XML data\r\n      const xml = await parseStringPromise(tileset.data);\r\n\r\n      // Map 'TexturePacker' ids to 'Tiled' tile ids\r\n      this.tilesets[map.spritesheet] = xml.tileset.tile.map(t => ({\r\n        mapId: parseInt(t.$.id, 10),\r\n        id: t.image[0].$.source\r\n      }));\r\n    });\r\n\r\n    // Start loading process\r\n    this.loader.load();\r\n  };\r\n\r\n  private onStart = (): void => {\r\n    // Dispatch loading process to front-end\r\n    store.dispatch(startLoading());\r\n  };\r\n\r\n  private onLoad = (e): void => {\r\n    // Dispatch update front-end with new progress (for loading bar)\r\n    store.dispatch(onLoading(e.progress));\r\n  };\r\n\r\n  private onComplete = (): void => {\r\n    // Dispatch loadingCompleted event to front-end\r\n    store.dispatch(loadingCompleted());\r\n  };\r\n\r\n  // Get assets by 'Tiled' tile ids for tilemap\r\n  public getAssetByMapId = ({ tileset, mapId }): PIXI.Texture => {\r\n    const tileSetMap = this.tilesets[tileset];\r\n    const tile = tileSetMap.find(t => t.mapId === mapId);\r\n\r\n    if (!tile) throw new Error(`Tile with mapId: ${mapId} not found!`);\r\n\r\n    return this.getAssetById({ tileset, id: tile.id });\r\n  };\r\n\r\n  // Get assets by 'Texture Packer' id\r\n  public getAssetById = ({ tileset, id }): PIXI.Texture =>\r\n    this.loader?.resources[tileset]?.spritesheet?.textures[id];\r\n\r\n  // Get animations by 'Texture Packer' id\r\n  public getAnimationById = ({ tileset, id }): object =>\r\n    this.loader?.resources[tileset]?.spritesheet?.animations[id];\r\n}\r\n\r\nexport default AssetLoader;\r\n","import { ObjectDirection } from '../../enums';\r\n\r\nclass Position {\r\n  public x: number;\r\n  public y: number;\r\n  public xSpeed: number = 0;\r\n  public ySpeed: number = 0;\r\n  public speed: number;\r\n  public direction: ObjectDirection;\r\n\r\n  constructor({ x, y, speed = 1 }) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.speed = speed;\r\n  }\r\n\r\n  public setDirection = (direction: ObjectDirection): void => {\r\n    // Set new direction\r\n    this.direction = direction;\r\n\r\n    // Set x and y speed based on new direction\r\n    if (direction === ObjectDirection.Up) {\r\n      this.xSpeed = 0;\r\n      this.ySpeed = -1;\r\n    }\r\n\r\n    if (direction === ObjectDirection.Right) {\r\n      this.xSpeed = 1;\r\n      this.ySpeed = 0;\r\n    }\r\n\r\n    if (direction === ObjectDirection.Down) {\r\n      this.xSpeed = 0;\r\n      this.ySpeed = 1;\r\n    }\r\n\r\n    if (direction === ObjectDirection.Left) {\r\n      this.xSpeed = -1;\r\n      this.ySpeed = 0;\r\n    }\r\n  };\r\n}\r\n\r\nexport default Position;\r\n","import Position from './gameObjects/Position';\r\n\r\nclass BoxCollider {\r\n  public position: Position;\r\n  public width: number;\r\n  public height: number;\r\n  public halfWidth: number;\r\n  public halfHeight: number;\r\n\r\n  constructor({ width, height, position }) {\r\n    this.width = width;\r\n    this.height = height;\r\n    this.position = position;\r\n\r\n    this.halfWidth = width / 2;\r\n    this.halfHeight = height / 2;\r\n  }\r\n\r\n  // Check if other BoxCollider is in radius of this BoxCollider with variable radius\r\n  public isInRadius = (otherBoxCollider: BoxCollider, radius: number): boolean => {\r\n    return (\r\n      (otherBoxCollider.position.x - this.position.x) *\r\n        (otherBoxCollider.position.x - this.position.x) +\r\n        (otherBoxCollider.position.y - this.position.y) *\r\n          (otherBoxCollider.position.y - this.position.y) <=\r\n      radius * radius\r\n    );\r\n  };\r\n}\r\n\r\nexport default BoxCollider;\r\n","/* eslint-disable import/no-cycle */\r\nimport * as PIXI from 'pixi.js';\r\n\r\nimport IGameObject from '../IGameObject';\r\nimport Position from '../Position';\r\nimport BoxCollider from '../../BoxCollider';\r\nimport { ObjectDirection, Keys } from '../../../enums';\r\n\r\nimport game from '../../Game';\r\n\r\nclass Player implements IGameObject {\r\n  public boxCollider: BoxCollider;\r\n  public width: number = 16;\r\n  public height: number = 16;\r\n\r\n  private sprite: PIXI.AnimatedSprite;\r\n  private animations = {};\r\n\r\n  private direction: ObjectDirection;\r\n  private previousDirection: ObjectDirection;\r\n\r\n  private arrowKeyDown: boolean = false;\r\n  private previousArrowKeyDown: boolean = false;\r\n\r\n  private keysDown = {};\r\n  private previousKeysDown = {};\r\n\r\n  constructor({ x, y }) {\r\n    const position = new Position({ x, y, speed: 2 });\r\n    this.boxCollider = new BoxCollider({ width: 10, height: 14, position });\r\n  }\r\n\r\n  public init = (): PIXI.AnimatedSprite => {\r\n    // Get animations and add to animations object\r\n    this.initAnimation('1_walk_left');\r\n    this.initAnimation('1_walk_right');\r\n    this.initAnimation('1_walk_up');\r\n    this.initAnimation('1_walk_down');\r\n\r\n    // Create new AnimatedSprite based on animation\r\n    const sprite: PIXI.AnimatedSprite = new PIXI.AnimatedSprite(this.animations['1_walk_down']);\r\n    sprite.x = this.boxCollider.position.x;\r\n    sprite.y = this.boxCollider.position.y;\r\n    sprite.pivot.x = 8; // Set center of rotation to the center of the sprite\r\n    sprite.pivot.y = 8; // Set center of rotation to the center of the sprite\r\n    sprite.animationSpeed = 0.1; // Set animation speed\r\n    this.sprite = sprite;\r\n\r\n    return this.sprite;\r\n  };\r\n\r\n  private initAnimation = (id: string): void => {\r\n    // Get animation from assetLoader with id\r\n    const animation = game.assetLoader.getAnimationById({\r\n      tileset: 'img/sprites/kenney_rpg_characters/kenney_rpg_characters.json',\r\n      id\r\n    });\r\n\r\n    // Add animation to 'animations' object\r\n    this.animations[id] = animation;\r\n  };\r\n\r\n  public update = (): void => {\r\n    this.arrowKeyDown = false;\r\n\r\n    // Get keys that are currently down\r\n    this.keysDown = game.inputHandler.keysDown;\r\n\r\n    // Move up if the user is holding the arrow up key\r\n    if (\r\n      game.inputHandler.keyIsPressed(Keys.ArrowUp) &&\r\n      !game.currentLevel.collisionMap.objectCollides(this.boxCollider, ObjectDirection.Up)\r\n    ) {\r\n      this.boxCollider.position.y -= 1 * this.boxCollider.position.speed;\r\n      this.direction = ObjectDirection.Up;\r\n      this.arrowKeyDown = true;\r\n    }\r\n\r\n    // Move right if the user is holding the arrow right key\r\n    if (\r\n      game.inputHandler.keyIsPressed(Keys.ArrowRight) &&\r\n      !game.currentLevel.collisionMap.objectCollides(this.boxCollider, ObjectDirection.Right)\r\n    ) {\r\n      this.boxCollider.position.x += 1 * this.boxCollider.position.speed;\r\n      this.direction = ObjectDirection.Right;\r\n      this.arrowKeyDown = true;\r\n    }\r\n\r\n    // Move down if the user is holding the arrow down key\r\n    if (\r\n      game.inputHandler.keyIsPressed(Keys.ArrowDown) &&\r\n      !game.currentLevel.collisionMap.objectCollides(this.boxCollider, ObjectDirection.Down)\r\n    ) {\r\n      this.boxCollider.position.y += 1 * this.boxCollider.position.speed;\r\n      this.direction = ObjectDirection.Down;\r\n      this.arrowKeyDown = true;\r\n    }\r\n\r\n    // Move left if the user is holding the arrow left key\r\n    if (\r\n      game.inputHandler.keyIsPressed(Keys.ArrowLeft) &&\r\n      !game.currentLevel.collisionMap.objectCollides(this.boxCollider, ObjectDirection.Left)\r\n    ) {\r\n      this.boxCollider.position.x -= 1 * this.boxCollider.position.speed;\r\n      this.direction = ObjectDirection.Left;\r\n      this.arrowKeyDown = true;\r\n    }\r\n\r\n    // Try user actions once when the SpaceBar key is pressed\r\n    if (\r\n      game.inputHandler.keyIsPressed(Keys.SpaceBar) &&\r\n      !(Keys.SpaceBar in this.previousKeysDown)\r\n    ) {\r\n      game.currentLevel.trashLayer.pickupTrash(this.boxCollider);\r\n      game.currentLevel.gameObjectLayer.repairFilter(this.boxCollider);\r\n    }\r\n\r\n    // Update animation if the direction has changed\r\n    if (this.direction !== this.previousDirection) {\r\n      this.sprite.textures = this.animations[\r\n        `1_walk_${ObjectDirection[this.direction].toLowerCase()}`\r\n      ];\r\n      this.sprite.play();\r\n    }\r\n\r\n    // Stop the animation if the user stopped moving\r\n    if (!this.arrowKeyDown && (this.sprite.currentFrame === 1 || this.sprite.currentFrame === 3)) {\r\n      this.sprite.stop();\r\n    } else if (this.previousArrowKeyDown !== this.arrowKeyDown) {\r\n      this.sprite.play();\r\n    }\r\n\r\n    // Update previous values for next loop\r\n    this.previousDirection = this.direction;\r\n    this.previousArrowKeyDown = this.arrowKeyDown;\r\n    this.previousKeysDown = { ...this.keysDown };\r\n  };\r\n\r\n  public render = (): void => {\r\n    // Update sprite position\r\n    this.sprite.x = this.boxCollider.position.x;\r\n    this.sprite.y = this.boxCollider.position.y;\r\n  };\r\n\r\n  public destroy = (): void => {\r\n    // Destroy sprite\r\n    this.sprite.destroy();\r\n  };\r\n\r\n  public pause = (): void => {\r\n    // Pause animation\r\n    this.sprite.stop();\r\n  };\r\n\r\n  public resume = (): void => {\r\n    // Resume animation when still moving\r\n    if (this.arrowKeyDown) {\r\n      this.sprite.play();\r\n    }\r\n  };\r\n}\r\n\r\nexport default Player;\r\n","// Generate random between 2 numbers\r\nexport default (min, max) => Math.floor(Math.random() * (max - min + 1) + min);\r\n","/* eslint-disable import/no-cycle */\r\nimport * as PIXI from 'pixi.js';\r\n\r\nimport IGameObject from '../IGameObject';\r\nimport BoxCollider from '../../BoxCollider';\r\nimport Position from '../Position';\r\nimport game from '../../Game';\r\nimport random from '../../../utils/random';\r\nimport { GameEventIds, ObjectDirection } from '../../../enums';\r\n\r\nclass Civilian implements IGameObject {\r\n  public boxCollider: BoxCollider;\r\n\r\n  private type: number;\r\n  private sprite: PIXI.AnimatedSprite;\r\n  private animations: object = {};\r\n\r\n  constructor({ x, y }) {\r\n    // Set position with random speed\r\n    const position = new Position({ x, y, speed: random(75, 125) / 100 });\r\n    // Set object size for collision detection\r\n    this.boxCollider = new BoxCollider({ width: 16, height: 16, position });\r\n  }\r\n\r\n  public init = (): PIXI.AnimatedSprite => {\r\n    // Get random character\r\n    this.type = random(2, 6);\r\n\r\n    // Get animations and add to animations object\r\n    this.initAnimation(`${this.type}_walk_left`);\r\n    this.initAnimation(`${this.type}_walk_right`);\r\n    this.initAnimation(`${this.type}_walk_up`);\r\n    this.initAnimation(`${this.type}_walk_down`);\r\n\r\n    // Create new AnimatedSprite based on animation\r\n    const sprite = new PIXI.AnimatedSprite(this.animations[`${this.type}_walk_down`]); // Create new pixi AnimatedSprite from initialized animation\r\n    sprite.x = this.boxCollider.position.x; // Initial x\r\n    sprite.y = this.boxCollider.position.y; // Initial y\r\n    sprite.pivot.x = 8; // Set center of rotation to the center of the sprite\r\n    sprite.pivot.y = 8; // Set center of rotation to the center of the sprite\r\n    sprite.animationSpeed = 0.1; // Set animation speed\r\n    sprite.play(); // Start animation\r\n    this.sprite = sprite;\r\n\r\n    return this.sprite;\r\n  };\r\n\r\n  private initAnimation = (id: string): void => {\r\n    // Get animation from assetLoader with id\r\n    const animation = game.assetLoader.getAnimationById({\r\n      tileset: 'img/sprites/kenney_rpg_characters/kenney_rpg_characters.json',\r\n      id\r\n    });\r\n\r\n    // Add animation to 'animations' object\r\n    this.animations[id] = animation;\r\n  };\r\n\r\n  public update = (): void => {\r\n    // Find possible directions for AI\r\n    const directions = game.currentLevel.eventsMap.tilesWithIdAround(\r\n      this.boxCollider,\r\n      GameEventIds.SidewalkArea\r\n    );\r\n\r\n    // Check if some possible directions are found\r\n    if (directions && directions.length) {\r\n      // Keep moving in same direction 99 out of 100 times or find a new direction\r\n      if (!directions.includes(this.boxCollider.position.direction) || Math.random() > 0.99) {\r\n        // Update to new direction\r\n        this.boxCollider.position.setDirection(directions[random(0, directions.length)]);\r\n\r\n        // Animation based on new direction\r\n        switch (this.boxCollider.position.direction) {\r\n          case ObjectDirection.Up:\r\n            this.sprite.textures = this.animations[`${this.type}_walk_up`];\r\n            break;\r\n          case ObjectDirection.Down:\r\n            this.sprite.textures = this.animations[`${this.type}_walk_down`];\r\n            break;\r\n          case ObjectDirection.Left:\r\n            this.sprite.textures = this.animations[`${this.type}_walk_left`];\r\n            break;\r\n          case ObjectDirection.Right:\r\n            this.sprite.textures = this.animations[`${this.type}_walk_right`];\r\n            break;\r\n        }\r\n\r\n        // Start animation\r\n        if (!this.sprite.playing) this.sprite.play();\r\n      }\r\n\r\n      // Update position with new position\r\n      this.boxCollider.position.x +=\r\n        this.boxCollider.position.speed * this.boxCollider.position.xSpeed;\r\n      this.boxCollider.position.y +=\r\n        this.boxCollider.position.speed * this.boxCollider.position.ySpeed;\r\n\r\n      // Try to spawn trash\r\n      game.currentLevel.trashLayer.trySpawnTrash(\r\n        this.boxCollider.position.x,\r\n        this.boxCollider.position.y\r\n      );\r\n    }\r\n  };\r\n\r\n  public render = (): void => {\r\n    // Render sprite at right x,y coordinates\r\n    this.sprite.x = this.boxCollider.position.x;\r\n    this.sprite.y = this.boxCollider.position.y;\r\n  };\r\n\r\n  public destroy = (): void => {\r\n    // Remove sprite from PixiJS\r\n    this.sprite.destroy();\r\n  };\r\n\r\n  public pause = (): void => {\r\n    // Stop animation on pause\r\n    this.sprite.stop();\r\n  };\r\n\r\n  public resume = (): void => {\r\n    // Start animation on resume\r\n    this.sprite.play();\r\n  };\r\n}\r\n\r\nexport default Civilian;\r\n","/* eslint-disable import/no-cycle */\r\nimport IGameObject from '../IGameObject';\r\nimport Position from '../Position';\r\nimport BoxCollider from '../../BoxCollider';\r\n\r\nimport game from '../../Game';\r\n\r\nimport { GameEventIds } from '../../../enums';\r\n\r\nclass CivilianSpawnPoint implements IGameObject {\r\n  public boxCollider: BoxCollider;\r\n  private spawnDelay: number;\r\n  private spawnChance: number;\r\n\r\n  constructor({ x, y, spawnDelay, spawnChance }) {\r\n    this.boxCollider = new BoxCollider({ width: 16, height: 16, position: new Position({ x, y }) });\r\n    this.spawnDelay = spawnDelay;\r\n    this.spawnChance = spawnChance;\r\n  }\r\n\r\n  public init = (): void => {};\r\n\r\n  public update = (): void => {\r\n    // Run once every spawnDelay loop set in level config\r\n    if (!(game.gameLoop.frame % this.spawnDelay)) {\r\n      // Spawn a civilian with set spawnChance in level config\r\n      if (Math.random() < this.spawnChance) {\r\n        // Find nearest pavement\r\n        const position = game.currentLevel.eventsMap.nearestEventWithId({\r\n          x: this.boxCollider.position.x,\r\n          y: this.boxCollider.position.y,\r\n          id: GameEventIds.SidewalkArea\r\n        });\r\n\r\n        // Spawn civilian on new position\r\n        game.currentLevel.civilianLayer.spawnCivilian(position);\r\n      }\r\n    }\r\n  };\r\n\r\n  public render = (): void => {};\r\n\r\n  public destroy = (): void => {};\r\n\r\n  public pause = (): void => {};\r\n\r\n  public resume = (): void => {};\r\n}\r\n\r\nexport default CivilianSpawnPoint;\r\n","/* eslint-disable import/no-cycle */\r\nimport * as PIXI from 'pixi.js';\r\n\r\nimport IGameObject from '../IGameObject';\r\nimport BoxCollider from '../../BoxCollider';\r\nimport Position from '../Position';\r\nimport game from '../../Game';\r\nimport random from '../../../utils/random';\r\n\r\nclass Trash implements IGameObject {\r\n  public boxCollider: BoxCollider;\r\n  public id: number;\r\n  public sprite: PIXI.Sprite;\r\n\r\n  private type: number;\r\n  private rotation: number;\r\n\r\n  constructor({ x, y, id }) {\r\n    this.id = id;\r\n    this.boxCollider = new BoxCollider({ width: 8, height: 8, position: new Position({ x, y }) });\r\n  }\r\n\r\n  public init = (): PIXI.Sprite => {\r\n    // Get random trash type\r\n    this.type = random(1, 12);\r\n\r\n    // Set random rotation\r\n    this.rotation = random(0, 360) * (Math.PI / 180);\r\n\r\n    // Get trash sprite by id\r\n    const texture: PIXI.Texture = game.assetLoader.getAssetById({\r\n      tileset: 'img/sprites/kenney_rpg_urban_city/kenney_rpg_urban_city.json',\r\n      id: `trash_${this.type}.png`\r\n    });\r\n\r\n    // Create new Sprite\r\n    const sprite = new PIXI.Sprite(texture);\r\n    sprite.rotation = this.rotation; // Set random rotation\r\n    sprite.x = this.boxCollider.position.x; // Set init position x\r\n    sprite.y = this.boxCollider.position.y; // Set init position y\r\n    sprite.pivot.x = 4; // Set center of rotation to the center of the sprite\r\n    sprite.pivot.y = 4; // Set center of rotation to the center of the sprite\r\n    this.sprite = sprite;\r\n\r\n    return this.sprite;\r\n  };\r\n\r\n  public update = (): void => {};\r\n\r\n  public render = (): void => {\r\n    // Render sprite at right x,y coordinates\r\n    this.sprite.x = this.boxCollider.position.x;\r\n    this.sprite.y = this.boxCollider.position.y;\r\n  };\r\n\r\n  public destroy = (): void => {\r\n    // Destroy sprite\r\n    this.sprite.destroy();\r\n  };\r\n\r\n  public pause = (): void => {};\r\n\r\n  public resume = (): void => {};\r\n}\r\n\r\nexport default Trash;\r\n","/* eslint-disable import/no-cycle */\r\nimport * as PIXI from 'pixi.js';\r\n\r\nimport IGameObject from '../IGameObject';\r\nimport Position from '../Position';\r\nimport BoxCollider from '../../BoxCollider';\r\nimport game from '../../Game';\r\nimport { TileLayers } from '../../../enums';\r\n\r\nclass WaterTile implements IGameObject {\r\n  public boxCollider: BoxCollider;\r\n\r\n  private tileX: number;\r\n  private tileY: number;\r\n  private tileSize: number;\r\n\r\n  private sprite: PIXI.Sprite;\r\n  private isDirty: boolean = false;\r\n\r\n  private texture: PIXI.Texture;\r\n  private textureDirty: PIXI.Texture;\r\n\r\n  constructor({ x, y, tileX, tileY, tileSize }) {\r\n    this.boxCollider = new BoxCollider({\r\n      width: tileSize,\r\n      height: tileSize,\r\n      position: new Position({ x, y })\r\n    });\r\n\r\n    this.tileX = tileX;\r\n    this.tileY = tileY;\r\n    this.tileSize = tileSize;\r\n  }\r\n\r\n  public init = (): PIXI.Sprite => {\r\n    this.texture = game.assetLoader.getAssetById({\r\n      tileset: 'img/sprites/kenney_rpg_urban_city/kenney_rpg_urban_city.json',\r\n      id: 'tile_0198.png'\r\n    }); // Get texture by id\r\n\r\n    this.textureDirty = game.assetLoader.getAssetById({\r\n      tileset: 'img/sprites/kenney_rpg_urban_city/kenney_rpg_urban_city.json',\r\n      id: 'tile_0198_dirty.png'\r\n    }); // Get dirty texture by id\r\n\r\n    this.sprite = new PIXI.Sprite(this.texture);\r\n    this.sprite.x = this.tileX * this.tileSize + this.tileSize / 2; // add pivot to position and multiply by tileSize\r\n    this.sprite.y = this.tileY * this.tileSize + this.tileSize / 2; // add pivot to position and multiply by tileSize\r\n    this.sprite.pivot.x = this.tileSize / 2; // Set center of rotation to the center of the sprite\r\n    this.sprite.pivot.y = this.tileSize / 2; // Set center of rotation to the center of the sprite\r\n\r\n    return this.sprite;\r\n  };\r\n\r\n  public update = (): void => {};\r\n\r\n  public render = (): void => {\r\n    this.sprite.x = this.tileX * this.tileSize + this.tileSize / 2;\r\n    this.sprite.y = this.tileY * this.tileSize + this.tileSize / 2;\r\n  };\r\n\r\n  public destroy = (): void => {\r\n    this.sprite.destroy();\r\n  };\r\n\r\n  public pause = (): void => {};\r\n\r\n  public resume = (): void => {};\r\n\r\n  public setIsDirty = (isDirty: boolean): void => {\r\n    if (isDirty) {\r\n      this.sprite.texture = this.textureDirty;\r\n    } else {\r\n      this.sprite.texture = this.texture;\r\n    }\r\n\r\n    this.isDirty = isDirty;\r\n  };\r\n\r\n  // Check if object is an instance of this object (WaterTile)\r\n  public static isWaterTile(object: any): object is WaterTile {\r\n    return 'setIsDirty' in object;\r\n  }\r\n}\r\n\r\nexport default WaterTile;\r\n","/* eslint-disable import/no-cycle */\r\nimport { ColorReplaceFilter } from 'pixi-filters';\r\n\r\nimport IGameObject from '../IGameObject';\r\nimport Position from '../Position';\r\nimport BoxCollider from '../../BoxCollider';\r\nimport game from '../../Game';\r\nimport random from '../../../utils/random';\r\n\r\nclass FilterSystem implements IGameObject {\r\n  public boxCollider: BoxCollider;\r\n  public filterActive: boolean = true;\r\n  private previousFilterActive: boolean = true;\r\n  private filterBreakDownDuration: number;\r\n\r\n  constructor({ x, y }) {\r\n    this.boxCollider = new BoxCollider({ width: 16, height: 16, position: new Position({ x, y }) });\r\n  }\r\n\r\n  public init = (): void => {\r\n    // Break down filter within 10 and 120 seconds\r\n    this.filterBreakDownDuration = random(600, 7200);\r\n  };\r\n\r\n  public update = (): void => {\r\n    // Disable filter after set 'filterBreakDownDuration'\r\n    if (game.gameLoop.frame > 0 && !(game.gameLoop.frame % this.filterBreakDownDuration)) {\r\n      this.filterActive = false;\r\n    }\r\n\r\n    // Update water with set filter active state\r\n    if (this.filterActive !== this.previousFilterActive) {\r\n      game.currentLevel.gameObjectLayer.setWaterDirty(!this.filterActive);\r\n\r\n      if (this.filterActive) {\r\n        // Reset breakdown duration when fixed 120 to 180 seconds\r\n        this.filterBreakDownDuration = random(7200, 10800);\r\n      }\r\n    }\r\n\r\n    this.previousFilterActive = this.filterActive;\r\n  };\r\n\r\n  public render = (): void => {};\r\n\r\n  public destroy = (): void => {};\r\n\r\n  public pause = (): void => {};\r\n\r\n  public resume = (): void => {};\r\n\r\n  public activateFilter = (): void => {\r\n    // Set filter active\r\n    this.filterActive = true;\r\n  };\r\n\r\n  // Check if object is an instance of this object (FilterSystem)\r\n  public static isFilterSystem(object: any): object is FilterSystem {\r\n    return 'filterActive' in object;\r\n  }\r\n}\r\n\r\nexport default FilterSystem;\r\n","/* eslint-disable import/no-cycle */\r\nimport Player from './objects/Player';\r\nimport Civilian from './objects/Civilian';\r\nimport CivilianSpawnPoint from './objects/CivilianSpawnPoint';\r\nimport Trash from './objects/Trash';\r\nimport WaterTile from './objects/WaterTile';\r\nimport FilterSystem from './objects/FilterSystem';\r\n\r\n// Export all object constructors for GameObjectFactory\r\nexport default {\r\n  Player,\r\n  Civilian,\r\n  CivilianSpawnPoint,\r\n  Trash,\r\n  WaterTile,\r\n  FilterSystem\r\n};\r\n","/* eslint-disable import/no-cycle */\r\nimport gameObjects from './gameObjects';\r\n\r\nimport IGameObject from './gameObjects/IGameObject';\r\n\r\nclass GameObjectFactory {\r\n  // Create new GameObject instance based on name\r\n  public create = ({ name, ...props }): IGameObject => {\r\n    // Check if GameObject with name exists\r\n    if (!(name in gameObjects)) throw new Error(`gameObject with name: ${name} not found.`);\r\n\r\n    // Create instance of GameObject and pass properties\r\n    return new gameObjects[name](props);\r\n  };\r\n}\r\n\r\nexport default GameObjectFactory;\r\n","import BoxCollider from './BoxCollider';\r\nimport { ObjectDirection } from '../enums';\r\nimport Position from './gameObjects/Position';\r\nimport random from '../utils/random';\r\n\r\nclass TileMap {\r\n  public tiles: number[];\r\n  private width: number;\r\n  private tileSize: number;\r\n\r\n  constructor({ tiles, width, tileSize }) {\r\n    this.tiles = tiles;\r\n    this.width = width;\r\n    this.tileSize = tileSize;\r\n  }\r\n\r\n  // Check if object is gonna collide with tileMap\r\n  public objectCollides = (boxCollider: BoxCollider, direction: ObjectDirection): boolean => {\r\n    // Look infront of GameObject based on direction for future collisions\r\n    switch (direction) {\r\n      case ObjectDirection.Up: {\r\n        const leftTileX: number = Math.floor(\r\n          (boxCollider.position.x - boxCollider.halfWidth) / this.tileSize\r\n        );\r\n        const bottomTileY: number = Math.floor(\r\n          (boxCollider.position.y - (boxCollider.halfHeight + boxCollider.position.speed)) /\r\n            this.tileSize\r\n        );\r\n        const rightTileX: number = Math.floor(\r\n          (boxCollider.position.x + boxCollider.halfWidth) / this.tileSize\r\n        );\r\n\r\n        return (\r\n          !!this.tiles[bottomTileY * this.width + leftTileX] ||\r\n          !!this.tiles[bottomTileY * this.width + rightTileX]\r\n        );\r\n      }\r\n\r\n      case ObjectDirection.Right: {\r\n        const rightTileX: number = Math.floor(\r\n          (boxCollider.position.x + boxCollider.halfWidth + boxCollider.position.speed) /\r\n            this.tileSize\r\n        );\r\n        const bottomTileY: number = Math.floor(\r\n          (boxCollider.position.y - boxCollider.halfHeight) / this.tileSize\r\n        );\r\n        const topTileY: number = Math.floor(\r\n          (boxCollider.position.y + boxCollider.halfHeight) / this.tileSize\r\n        );\r\n\r\n        return (\r\n          !!this.tiles[bottomTileY * this.width + rightTileX] ||\r\n          !!this.tiles[topTileY * this.width + rightTileX]\r\n        );\r\n      }\r\n\r\n      case ObjectDirection.Down: {\r\n        const leftTileX: number = Math.floor(\r\n          (boxCollider.position.x - boxCollider.halfWidth) / this.tileSize\r\n        );\r\n        const topTileY: number = Math.floor(\r\n          (boxCollider.position.y + boxCollider.halfHeight + boxCollider.position.speed) /\r\n            this.tileSize\r\n        );\r\n        const rightTileX: number = Math.floor(\r\n          (boxCollider.position.x + boxCollider.halfWidth) / this.tileSize\r\n        );\r\n\r\n        return (\r\n          !!this.tiles[topTileY * this.width + leftTileX] ||\r\n          !!this.tiles[topTileY * this.width + rightTileX]\r\n        );\r\n      }\r\n\r\n      case ObjectDirection.Left: {\r\n        const leftTileX: number = Math.floor(\r\n          (boxCollider.position.x - boxCollider.halfWidth - boxCollider.position.speed) /\r\n            this.tileSize\r\n        );\r\n        const bottomTileY: number = Math.floor(\r\n          (boxCollider.position.y - boxCollider.halfHeight) / this.tileSize\r\n        );\r\n        const topTileY: number = Math.floor(\r\n          (boxCollider.position.y + boxCollider.halfHeight) / this.tileSize\r\n        );\r\n\r\n        return (\r\n          !!this.tiles[bottomTileY * this.width + leftTileX] ||\r\n          !!this.tiles[topTileY * this.width + leftTileX]\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  // Look for possible directions around boxCollider\r\n  public tilesWithIdAround = (boxCollider: BoxCollider, tileId: number): ObjectDirection[] => {\r\n    const tileY: number = Math.floor(boxCollider.position.y / this.tileSize);\r\n    const tileX: number = Math.floor(boxCollider.position.x / this.tileSize);\r\n\r\n    const bottomY: number = Math.floor(\r\n      (boxCollider.position.y + boxCollider.halfWidth + boxCollider.position.speed) / this.tileSize\r\n    );\r\n\r\n    const topY: number = Math.floor(\r\n      (boxCollider.position.y - boxCollider.halfWidth - boxCollider.position.speed) / this.tileSize\r\n    );\r\n\r\n    const leftX: number = Math.floor(\r\n      (boxCollider.position.x - boxCollider.halfWidth - boxCollider.position.speed) / this.tileSize\r\n    );\r\n\r\n    const rightX: number = Math.floor(\r\n      (boxCollider.position.x + boxCollider.halfWidth + boxCollider.position.speed) / this.tileSize\r\n    );\r\n\r\n    const directions: ObjectDirection[] = [];\r\n\r\n    if (this.tiles[topY * this.width + tileX] === tileId) {\r\n      directions.push(ObjectDirection.Up);\r\n    }\r\n\r\n    if (this.tiles[tileY * this.width + rightX] === tileId) {\r\n      directions.push(ObjectDirection.Right);\r\n    }\r\n\r\n    if (this.tiles[bottomY * this.width + tileX] === tileId) {\r\n      directions.push(ObjectDirection.Down);\r\n    }\r\n\r\n    if (this.tiles[tileY * this.width + leftX] === tileId) {\r\n      directions.push(ObjectDirection.Left);\r\n    }\r\n\r\n    return directions;\r\n  };\r\n\r\n  // Look for tile with certain id around x, y\r\n  public nearestEventWithId = ({ x, y, id }): any => {\r\n    const tileX = Math.floor(x / this.tileSize);\r\n    const tileY = Math.floor(y / this.tileSize);\r\n\r\n    if (this.tiles[tileY * this.width + tileX + 1] === id) {\r\n      return {\r\n        x: (tileX + 1) * this.tileSize + this.tileSize / 2,\r\n        y: tileY * this.tileSize + this.tileSize / 2\r\n      };\r\n    }\r\n\r\n    if (this.tiles[tileY * this.width + tileX - 1] === id) {\r\n      return {\r\n        x: (tileX - 1) * this.tileSize + this.tileSize / 2,\r\n        y: tileY * this.tileSize + this.tileSize / 2\r\n      };\r\n    }\r\n\r\n    if (this.tiles[(tileY + 1) * this.width + tileX] === id) {\r\n      return {\r\n        x: tileX * this.tileSize + this.tileSize / 2,\r\n        y: (tileY + 1) * this.tileSize + this.tileSize / 2\r\n      };\r\n    }\r\n\r\n    if (this.tiles[(tileY - 1) * this.width + tileX] === id) {\r\n      return {\r\n        x: tileX * this.tileSize + this.tileSize / 2,\r\n        y: (tileY - 1) * this.tileSize + this.tileSize / 2\r\n      };\r\n    }\r\n\r\n    throw Error(`No event with id: ${id} found around x: ${x} y: ${y}`);\r\n  };\r\n\r\n  public getRandomTileById = (id): Position => {\r\n    const tile: number = random(0, this.tiles.length - 1);\r\n\r\n    if (this.tiles[tile] === id) {\r\n      const tileX = tile % this.width;\r\n      const tileY = Math.floor((tile + 1) / this.width);\r\n      return new Position({\r\n        x: tileX * this.tileSize + random(0, 1600) / 100,\r\n        y: tileY * this.tileSize + random(0, 1600) / 100\r\n      });\r\n    }\r\n\r\n    return this.getRandomTileById(id);\r\n  };\r\n}\r\n\r\nexport default TileMap;\r\n","/* eslint-disable import/no-cycle */\r\nimport * as PIXI from 'pixi.js';\r\n\r\nimport ILayer from './ILayer';\r\nimport IGameObject from '../gameObjects/IGameObject';\r\nimport game from '../Game';\r\nimport BoxCollider from '../BoxCollider';\r\nimport Trash from '../gameObjects/objects/Trash';\r\nimport { GameEventIds } from '../../enums';\r\n\r\nclass TrashLayer implements ILayer {\r\n  public container: PIXI.Container;\r\n  public trash: IGameObject[] = [];\r\n\r\n  private index: number = 0;\r\n  private initialTrashAmount: number;\r\n  private trashSpawnChance: number;\r\n  private trashMaxSpawnChance: number;\r\n  private trashIncreaseSpawnChance: number;\r\n  private trashSpawnIncreaseDelay: number;\r\n  private maxTrash: number;\r\n\r\n  constructor({\r\n    initialTrashAmount,\r\n    trashSpawnChance,\r\n    trashMaxSpawnChance,\r\n    trashIncreaseSpawnChance,\r\n    trashSpawnIncreaseDelay,\r\n    maxTrash\r\n  }) {\r\n    this.initialTrashAmount = initialTrashAmount;\r\n    this.trashSpawnChance = trashSpawnChance;\r\n    this.trashMaxSpawnChance = trashMaxSpawnChance;\r\n    this.trashIncreaseSpawnChance = trashIncreaseSpawnChance;\r\n    this.trashSpawnIncreaseDelay = trashSpawnIncreaseDelay;\r\n    this.maxTrash = maxTrash;\r\n\r\n    // Create container (layer) and add it to the main PIXI stage\r\n    this.container = new PIXI.Container();\r\n    game.game.stage.addChild(this.container);\r\n\r\n    // Spawn random trash on level based on config amount\r\n    for (let i = 0; i < this.initialTrashAmount; i += 1) {\r\n      const position = game.currentLevel.eventsMap.getRandomTileById(GameEventIds.SidewalkArea);\r\n      this.spawnTrash(position.x, position.y);\r\n    }\r\n  }\r\n\r\n  public update = (): void => {\r\n    // Call update function for every trash gameObject\r\n    for (let i = 0; i < this.trash.length; i += 1) {\r\n      this.trash[i].update();\r\n    }\r\n  };\r\n\r\n  public render = (): void => {\r\n    // Call render function for every trash gameObject\r\n    for (let i = 0; i < this.trash.length; i += 1) {\r\n      this.trash[i].render();\r\n    }\r\n  };\r\n\r\n  public pause = (): void => {\r\n    // Call pause function for every trash gameObject\r\n    for (let i = 0; i < this.trash.length; i += 1) {\r\n      this.trash[i].pause();\r\n    }\r\n  };\r\n\r\n  public resume = (): void => {\r\n    // Call resume function for every trash gameObject\r\n    for (let i = 0; i < this.trash.length; i += 1) {\r\n      this.trash[i].resume();\r\n    }\r\n  };\r\n\r\n  public trySpawnTrash = (x, y): void => {\r\n    // Spawn trash at set spawnChance\r\n    if (Math.random() < this.trashSpawnChance) {\r\n      this.spawnTrash(x, y);\r\n    }\r\n\r\n    // Increase or decrease spawnChance over time (based on config)\r\n    if (\r\n      this.trashSpawnChance < this.trashMaxSpawnChance &&\r\n      !(game.gameLoop.frame % this.trashSpawnIncreaseDelay)\r\n    ) {\r\n      this.trashSpawnChance += this.trashIncreaseSpawnChance;\r\n    }\r\n  };\r\n\r\n  // Spawn trash on set position\r\n  private spawnTrash = (x, y): void => {\r\n    if (this.trash.length >= this.maxTrash) return; // Don't spawn trash when limit is reached\r\n\r\n    // Create new trash gameObject with factory\r\n    const trash: IGameObject = game.gameObjectFactory.create({\r\n      name: 'Trash',\r\n      x,\r\n      y,\r\n      id: this.index += 1\r\n    });\r\n\r\n    // Get sprite from gameObject and add to layer\r\n    const sprite = trash.init() as PIXI.Sprite;\r\n    this.container.addChild(sprite);\r\n\r\n    // Add gameObject to array of existing gameObjects\r\n    this.trash.push(trash);\r\n  };\r\n\r\n  public pickupTrash(otherBoxCollider: BoxCollider): void {\r\n    const trashIdsInRadius: number[] = [];\r\n\r\n    // Find trash gameObjects that are in radius of 'otherBoxCollider'\r\n    for (let i = 0; i < this.trash.length; i += 1) {\r\n      if (this.trash[i].boxCollider.isInRadius(otherBoxCollider, 20)) {\r\n        const trashItem = this.trash[i] as Trash;\r\n        trashIdsInRadius.push(trashItem.id);\r\n      }\r\n    }\r\n\r\n    // Filter and destroy found trash gameObjects from array\r\n    this.trash = this.trash.filter(t => {\r\n      const trashItem = t as Trash;\r\n      if (trashIdsInRadius.includes(trashItem.id)) {\r\n        this.container.removeChild(trashItem.sprite);\r\n        trashItem.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n}\r\n\r\nexport default TrashLayer;\r\n","/* eslint-disable import/no-cycle */\r\nimport * as PIXI from 'pixi.js';\r\n\r\nimport ILayer from './ILayer';\r\nimport game from '../Game';\r\nimport { TileLayers, Flags } from '../../enums';\r\n\r\nclass TileLayer implements ILayer {\r\n  public container: PIXI.Container;\r\n\r\n  private layers: number;\r\n  private width: number;\r\n  private height: number;\r\n  private tileMapLayers: number[][];\r\n  private tileMap: PIXI.Sprite[][];\r\n  private tileset: string;\r\n  private tileSize: number;\r\n\r\n  constructor({ layers, width, height, tileMapLayers, tileset, tileSize }) {\r\n    this.layers = layers;\r\n    this.width = width;\r\n    this.height = height;\r\n    this.tileMapLayers = tileMapLayers;\r\n    this.tileMap = new Array(this.layers).fill([]);\r\n    this.tileset = tileset;\r\n    this.tileSize = tileSize;\r\n\r\n    // Create container (layer) and add it to the main PIXI stage\r\n    this.container = new PIXI.Container();\r\n    game.game.stage.addChild(this.container);\r\n\r\n    // Loop through all layers and tiles and spawn sprite on level screen\r\n    for (let l = 0; l < this.layers; l += 1) {\r\n      for (let y = 0; y < this.height; y += 1) {\r\n        for (let x = 0; x < this.width; x += 1) {\r\n          // Get tile rotations with hex flags\r\n          let tileId = this.tileMapLayers[l][y * this.width + x];\r\n          let rotation = 0;\r\n\r\n          // Check if the sprite is rotated in any angle\r\n          const flippedHorizontally = tileId & Flags.FlippedHorizontally;\r\n          const flippedVertically = tileId & Flags.FlippedVertically;\r\n          const flippedDiagonally = tileId & Flags.FlippedDiagonally;\r\n\r\n          // Set the right angle in radians based on 'flipped' booleans from above\r\n          if (flippedVertically && flippedDiagonally) {\r\n            // 270 deg\r\n            rotation = Math.PI * 1.5;\r\n          } else if (flippedHorizontally && flippedVertically) {\r\n            // 180 deg\r\n            rotation = Math.PI;\r\n          } else if (flippedHorizontally && flippedDiagonally) {\r\n            // 90 deg\r\n            rotation = Math.PI * 0.5;\r\n          }\r\n\r\n          // Remove flags from tileId to get the actual tileId\r\n          tileId &= ~(\r\n            Flags.FlippedHorizontally |\r\n            Flags.FlippedVertically |\r\n            Flags.FlippedDiagonally\r\n          );\r\n\r\n          if (tileId) {\r\n            const texture = game.assetLoader.getAssetByMapId({\r\n              tileset: this.tileset,\r\n              mapId: tileId - 1\r\n            }); // Get texture by tileId\r\n\r\n            const sprite = new PIXI.Sprite(texture);\r\n            sprite.x = x * this.tileSize + this.tileSize / 2; // add pivot to position and multiply by tileSize\r\n            sprite.y = y * this.tileSize + this.tileSize / 2; // add pivot to position and multiply by tileSize\r\n            sprite.pivot.x = this.tileSize / 2; // Set center of rotation to the center of the sprite\r\n            sprite.pivot.y = this.tileSize / 2; // Set center of rotation to the center of the sprite\r\n            sprite.rotation = rotation; // Set found rotation\r\n            this.container.addChild(sprite);\r\n            this.tileMap[l][y * this.width + x] = sprite;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public update = (): void => {};\r\n\r\n  public render = (): void => {\r\n    // Re-render all tiles every loop\r\n    for (let l = 0; l < this.layers; l += 1) {\r\n      for (let y = 0; y < this.height; y += 1) {\r\n        for (let x = 0; x < this.width; x += 1) {\r\n          if (this.tileMap[l][y * this.width + x]) {\r\n            this.tileMap[l][y * this.width + x].x = x * this.tileSize + this.tileSize / 2;\r\n            this.tileMap[l][y * this.width + x].y = y * this.tileSize + this.tileSize / 2;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  public pause = (): void => {};\r\n\r\n  public resume = (): void => {};\r\n}\r\n\r\nexport default TileLayer;\r\n","/* eslint-disable import/no-cycle */\r\nimport * as PIXI from 'pixi.js';\r\n\r\nimport ILayer from './ILayer';\r\nimport game from '../Game';\r\nimport IConfigGameObject from '../gameObjects/IConfigGameObject';\r\nimport IGameObject from '../gameObjects/IGameObject';\r\nimport { GameEventIds } from '../../enums';\r\nimport WaterTile from '../gameObjects/objects/WaterTile';\r\nimport FilterSystem from '../gameObjects/objects/FilterSystem';\r\nimport BoxCollider from '../BoxCollider';\r\n\r\nclass GameObjectLayer implements ILayer {\r\n  public container: PIXI.Container;\r\n\r\n  private gameObjects: IConfigGameObject[];\r\n  private height: number;\r\n  private width: number;\r\n  private tileSize: number;\r\n\r\n  private activeGameObjects: IGameObject[] = [];\r\n\r\n  constructor({ gameObjects, height, width, tileSize, civilianSpawnDelay, civilianSpawnChance }) {\r\n    this.gameObjects = gameObjects;\r\n    this.height = height;\r\n    this.width = width;\r\n    this.tileSize = tileSize;\r\n\r\n    this.container = new PIXI.Container();\r\n    game.game.stage.addChild(this.container);\r\n\r\n    // Spawn gameobjects defined in Tiled\r\n    for (let y = 0; y < this.height; y += 1) {\r\n      for (let x = 0; x < this.width; x += 1) {\r\n        const objectId = game.currentLevel.eventsMap.tiles[y * this.width + x];\r\n\r\n        if (objectId && objectId === GameEventIds.CivilianSpawnPoint) {\r\n          const object = game.gameObjectFactory.create({\r\n            name: 'CivilianSpawnPoint',\r\n            x: x * this.tileSize + this.tileSize / 2,\r\n            y: y * this.tileSize + this.tileSize / 2,\r\n            spawnDelay: civilianSpawnDelay,\r\n            spawnChance: civilianSpawnChance\r\n          });\r\n\r\n          const sprite = object.init() as PIXI.Sprite | PIXI.AnimatedSprite;\r\n          if (sprite) this.container.addChild(sprite);\r\n\r\n          this.activeGameObjects.push(object);\r\n        }\r\n\r\n        if (objectId && objectId === GameEventIds.WaterTile) {\r\n          const object = game.gameObjectFactory.create({\r\n            name: 'WaterTile',\r\n            x: x * this.tileSize + this.tileSize / 2,\r\n            y: y * this.tileSize + this.tileSize / 2,\r\n            tileX: x,\r\n            tileY: y,\r\n            tileSize: this.tileSize\r\n          });\r\n\r\n          const sprite = object.init() as PIXI.Sprite | PIXI.AnimatedSprite;\r\n          if (sprite) this.container.addChild(sprite);\r\n\r\n          this.activeGameObjects.push(object);\r\n        }\r\n\r\n        if (objectId && objectId === GameEventIds.FilterSystem) {\r\n          const object = game.gameObjectFactory.create({\r\n            name: 'FilterSystem',\r\n            x: x * this.tileSize + this.tileSize / 2,\r\n            y: y * this.tileSize + this.tileSize / 2\r\n          });\r\n\r\n          const sprite = object.init() as PIXI.Sprite | PIXI.AnimatedSprite;\r\n          if (sprite) this.container.addChild(sprite);\r\n\r\n          this.activeGameObjects.push(object);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Spawn gameobjects defined in level.json\r\n    this.gameObjects.forEach(gameObject => {\r\n      const object: IGameObject = game.gameObjectFactory.create({\r\n        name: gameObject.name,\r\n        ...gameObject.props\r\n      });\r\n\r\n      const sprite = object.init() as PIXI.Sprite | PIXI.AnimatedSprite;\r\n      if (sprite) this.container.addChild(sprite);\r\n\r\n      this.activeGameObjects.push(object);\r\n    });\r\n  }\r\n\r\n  public update = (): void => {\r\n    for (let i = 0; i < this.activeGameObjects.length; i += 1) {\r\n      this.activeGameObjects[i].update();\r\n    }\r\n  };\r\n\r\n  public render = (): void => {\r\n    for (let i = 0; i < this.activeGameObjects.length; i += 1) {\r\n      this.activeGameObjects[i].render();\r\n    }\r\n  };\r\n\r\n  public pause = (): void => {\r\n    for (let i = 0; i < this.activeGameObjects.length; i += 1) {\r\n      this.activeGameObjects[i].pause();\r\n    }\r\n  };\r\n\r\n  public resume = (): void => {\r\n    for (let i = 0; i < this.activeGameObjects.length; i += 1) {\r\n      this.activeGameObjects[i].resume();\r\n    }\r\n  };\r\n\r\n  public setWaterDirty = (isDirty: boolean): void => {\r\n    for (let i = 0; i < this.activeGameObjects.length; i += 1) {\r\n      if (WaterTile.isWaterTile(this.activeGameObjects[i])) {\r\n        const waterTile = this.activeGameObjects[i] as WaterTile;\r\n        waterTile.setIsDirty(isDirty);\r\n      }\r\n    }\r\n  };\r\n\r\n  public repairFilter = (otherBoxCollider: BoxCollider): void => {\r\n    for (let i = 0; i < this.activeGameObjects.length; i += 1) {\r\n      if (FilterSystem.isFilterSystem(this.activeGameObjects[i])) {\r\n        const filterSystem = this.activeGameObjects[i] as FilterSystem;\r\n        if (filterSystem.boxCollider.isInRadius(otherBoxCollider, 20)) {\r\n          filterSystem.activateFilter();\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  public filterActive = (): boolean => {\r\n    for (let i = 0; i < this.activeGameObjects.length; i += 1) {\r\n      if (FilterSystem.isFilterSystem(this.activeGameObjects[i])) {\r\n        const filterSystem = this.activeGameObjects[i] as FilterSystem;\r\n        return filterSystem.filterActive;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  };\r\n}\r\n\r\nexport default GameObjectLayer;\r\n","/* eslint-disable import/no-cycle */\r\nimport * as PIXI from 'pixi.js';\r\n\r\nimport ILayer from './ILayer';\r\nimport IGameObject from '../gameObjects/IGameObject';\r\nimport game from '../Game';\r\n\r\nclass CivilianLayer implements ILayer {\r\n  public container: PIXI.Container;\r\n\r\n  private civilians: IGameObject[] = [];\r\n  private maxCivilians: number;\r\n\r\n  constructor({ maxCivilians }) {\r\n    this.maxCivilians = maxCivilians;\r\n\r\n    // Create container (layer) and add it to the main PIXI stage\r\n    this.container = new PIXI.Container();\r\n    game.game.stage.addChild(this.container);\r\n  }\r\n\r\n  public update = (): void => {\r\n    // Call update function for every civilian gameObject\r\n    for (let i = 0; i < this.civilians.length; i += 1) {\r\n      this.civilians[i].update();\r\n    }\r\n  };\r\n\r\n  public render = (): void => {\r\n    // Call render function for every civilian gameObject\r\n    for (let i = 0; i < this.civilians.length; i += 1) {\r\n      this.civilians[i].render();\r\n    }\r\n  };\r\n\r\n  public pause = (): void => {\r\n    // Call pause function for every civilian gameObject\r\n    for (let i = 0; i < this.civilians.length; i += 1) {\r\n      this.civilians[i].pause();\r\n    }\r\n  };\r\n\r\n  public resume = (): void => {\r\n    // Call resume function for every civilian gameObject\r\n    for (let i = 0; i < this.civilians.length; i += 1) {\r\n      this.civilians[i].resume();\r\n    }\r\n  };\r\n\r\n  public spawnCivilian = ({ x, y }): void => {\r\n    if (this.civilians.length >= this.maxCivilians) return; // Don't spawn civilian when set limit is reached\r\n\r\n    // Spawn civilian with gameObjectFactory\r\n    const civilian: IGameObject = game.gameObjectFactory.create({\r\n      name: 'Civilian',\r\n      x,\r\n      y\r\n    });\r\n\r\n    // Get sprite from gameObject and add to layer\r\n    const sprite = civilian.init() as PIXI.Sprite | PIXI.AnimatedSprite;\r\n    if (sprite) this.container.addChild(sprite);\r\n\r\n    // Add gameObject to array of existing gameObjects\r\n    this.civilians.push(civilian);\r\n  };\r\n}\r\n\r\nexport default CivilianLayer;\r\n","/* eslint-disable import/no-cycle */\r\nimport game from './Game';\r\nimport TileMap from './TileMap';\r\nimport TrashLayer from './layers/TrashLayer';\r\nimport TileLayer from './layers/TileLayer';\r\nimport GameObjectLayer from './layers/GameObjectLayer';\r\nimport CivilianLayer from './layers/CivilianLayer';\r\nimport IConfigLevel from './levels/IConfigLevel';\r\nimport ILayer from './layers/ILayer';\r\n\r\nclass Level {\r\n  public tileLayer: TileLayer;\r\n  public trashLayer: TrashLayer;\r\n  public civilianLayer: CivilianLayer;\r\n  public gameObjectLayer: GameObjectLayer;\r\n\r\n  private maxTrash: number;\r\n  private minTrashToWin: number;\r\n\r\n  private layers: ILayer[];\r\n\r\n  public collisionMap: TileMap;\r\n  public eventsMap: TileMap;\r\n\r\n  public init = (level: IConfigLevel): void => {\r\n    // Set level properties\r\n    this.maxTrash = level.maxTrash;\r\n    this.minTrashToWin = level.minTrashToWin;\r\n\r\n    // Create TileMaps for level\r\n    this.collisionMap = new TileMap({\r\n      tiles: level.collisionMap,\r\n      width: level.width,\r\n      tileSize: level.tileSize\r\n    });\r\n    this.eventsMap = new TileMap({\r\n      tiles: level.objectsMap,\r\n      width: level.width,\r\n      tileSize: level.tileSize\r\n    });\r\n\r\n    // Create layers for level\r\n    this.tileLayer = new TileLayer(level);\r\n    this.trashLayer = new TrashLayer(level);\r\n    this.civilianLayer = new CivilianLayer(level);\r\n    this.gameObjectLayer = new GameObjectLayer(level);\r\n\r\n    // Add layers to array for easy updates\r\n    this.layers = [this.tileLayer, this.trashLayer, this.civilianLayer, this.gameObjectLayer];\r\n  };\r\n\r\n  public update = (): void => {\r\n    // Call update function for all layers\r\n    for (let i = 0; i < this.layers.length; i += 1) {\r\n      this.layers[i].update();\r\n    }\r\n\r\n    // Update score once every 60 frames (1 second)\r\n    if (!(game.gameLoop.frame % game.gameLoop.fps)) {\r\n      // Get trash and filter scores\r\n      const trashScore = this.calculateTrashScore();\r\n      const filterScore = this.calculateFilterScore();\r\n\r\n      // Trash counts for 80% filter counts for 20%\r\n      const score = trashScore * 0.8 + filterScore * 0.2;\r\n\r\n      // Check if score has changed\r\n      if (game.getScore() !== score) {\r\n        // Update game with new score and update front-end\r\n        game.setScore(score);\r\n      }\r\n    }\r\n  };\r\n\r\n  public render = (): void => {\r\n    // Call render function for all layers\r\n    for (let i = 0; i < this.layers.length; i += 1) {\r\n      this.layers[i].render();\r\n    }\r\n  };\r\n\r\n  public pause = (): void => {\r\n    // Call pause function for all layers\r\n    for (let i = 0; i < this.layers.length; i += 1) {\r\n      this.layers[i].pause();\r\n    }\r\n  };\r\n\r\n  public resume = (): void => {\r\n    // Call resume function for all layers\r\n    for (let i = 0; i < this.layers.length; i += 1) {\r\n      this.layers[i].resume();\r\n    }\r\n  };\r\n\r\n  // Calculate trash score with margin: 'minTrashToWin'\r\n  private calculateTrashScore = (): number => {\r\n    if (this.trashLayer.trash.length > this.maxTrash) return 0;\r\n    const score =\r\n      ((this.maxTrash - this.trashLayer.trash.length) *\r\n        (this.maxTrash / (this.maxTrash - this.minTrashToWin))) /\r\n      10;\r\n    return score > 100 ? 100 : score;\r\n  };\r\n\r\n  // Calculate filter score\r\n  private calculateFilterScore = (): number => {\r\n    return this.gameObjectLayer.filterActive() ? 100 : 0;\r\n  };\r\n}\r\n\r\nexport default Level;\r\n","class InputHandler {\r\n  public keysDown = {};\r\n\r\n  constructor() {\r\n    // Handle key events\r\n    document.addEventListener('keydown', this.onKeyDown);\r\n    document.addEventListener('keyup', this.onKeyUp);\r\n  }\r\n\r\n  // Add pressed keys to keysDown object\r\n  private onKeyDown = (e): void => {\r\n    this.keysDown[e.keyCode] = true;\r\n  };\r\n\r\n  // Remove released keys from keysDown object\r\n  private onKeyUp = (e): void => {\r\n    delete this.keysDown[e.keyCode];\r\n  };\r\n\r\n  // Check if key exists in keysDown object\r\n  public keyIsPressed = (key: number): boolean => key in this.keysDown;\r\n}\r\n\r\nexport default InputHandler;\r\n","import { Popups } from '../enums.ts';\r\n\r\nexport function setScore(score) {\r\n  return {\r\n    type: 'SET_SCORE',\r\n    payload: score\r\n  };\r\n}\r\n\r\nexport function setTime(time) {\r\n  return {\r\n    type: 'SET_TIME',\r\n    payload: time\r\n  };\r\n}\r\n\r\nfunction pauseGameAction() {\r\n  return {\r\n    type: 'PAUSE_GAME'\r\n  };\r\n}\r\n\r\nexport function showPopup(popup) {\r\n  return {\r\n    type: 'SHOW_POPUP',\r\n    payload: popup\r\n  };\r\n}\r\n\r\nexport const pauseGame = () => {\r\n  return dispatch => {\r\n    dispatch(pauseGameAction());\r\n    dispatch(showPopup(Popups.Pause));\r\n  };\r\n};\r\n\r\nfunction resumeGameAction() {\r\n  return {\r\n    type: 'RESUME_GAME'\r\n  };\r\n}\r\n\r\nexport function hidePopup() {\r\n  return {\r\n    type: 'HIDE_POPUP'\r\n  };\r\n}\r\n\r\nexport const resumeGame = () => {\r\n  return dispatch => {\r\n    dispatch(resumeGameAction());\r\n    dispatch(hidePopup());\r\n  };\r\n};\r\n","import { Popups } from '../enums.ts';\r\nimport { showPopup } from './gameActions';\r\n\r\nfunction setLevelData(level) {\r\n  return {\r\n    type: 'SET_LEVEL_DATA',\r\n    payload: level\r\n  };\r\n}\r\n\r\nexport const levelInit = level => {\r\n  return dispatch => {\r\n    dispatch(setLevelData(level));\r\n    dispatch(showPopup(Popups.Info));\r\n  };\r\n};\r\n","/* eslint-disable import/no-cycle */\r\nimport * as PIXI from 'pixi.js';\r\n\r\nimport store from '../store';\r\nimport { setScreen } from '../actions/appActions';\r\nimport { Screens, Popups } from '../enums';\r\nimport GameLoop from './GameLoop';\r\nimport levels from './levels/levels';\r\nimport IConfigLevel from './levels/IConfigLevel';\r\nimport AssetLoader from './AssetLoader';\r\nimport GameObjectFactory from './GameObjectFactory';\r\nimport Level from './Level';\r\nimport InputHandler from './InputHandler';\r\nimport {\r\n  pauseGame,\r\n  resumeGame,\r\n  setTime,\r\n  setScore,\r\n  showPopup,\r\n  hidePopup\r\n} from '../actions/gameActions';\r\nimport { levelInit } from '../actions/levelActions';\r\n\r\nconst size = [960, 512];\r\nconst fps = 60;\r\n\r\nclass Game {\r\n  public gameLoop: GameLoop;\r\n  public game: PIXI.Application;\r\n  public assetLoader: AssetLoader;\r\n  public gameObjectFactory: GameObjectFactory;\r\n  public currentLevel: Level;\r\n  public inputHandler: InputHandler;\r\n\r\n  public async init(): Promise<void> {\r\n    const gameId = document.getElementById('game');\r\n\r\n    this.game = new PIXI.Application({\r\n      backgroundColor: 0x1099bb\r\n    });\r\n\r\n    // PIXI Settings\r\n    PIXI.settings.SCALE_MODE = PIXI.SCALE_MODES.NEAREST; // Display pixelart correctly\r\n\r\n    // Auto resize window\r\n    this.resize();\r\n    window.addEventListener('resize', this.resize);\r\n\r\n    // Append game canvas to html element with '#game'\r\n    if (gameId) gameId.appendChild(this.game.view);\r\n\r\n    this.assetLoader = new AssetLoader();\r\n    await this.assetLoader.init();\r\n\r\n    this.gameObjectFactory = new GameObjectFactory();\r\n\r\n    this.inputHandler = new InputHandler();\r\n\r\n    this.gameLoop = new GameLoop(fps, this.loop);\r\n  }\r\n\r\n  // Picked level from front-end\r\n  public pickLevel = (id: number): void => {\r\n    this.gameLoop.reset();\r\n\r\n    // Set front-end screen to game\r\n    store.dispatch(setScreen(Screens.Game));\r\n    // Tell front-end that the game has started\r\n    store.dispatch(resumeGame());\r\n\r\n    // Get level config by given id\r\n    const foundLevel: IConfigLevel = levels.find(l => l.id === id) as IConfigLevel;\r\n\r\n    // Create new level\r\n    this.currentLevel = new Level();\r\n    // Initialize level and pass level config\r\n    this.currentLevel.init(foundLevel);\r\n\r\n    // Save level data to front-end and display info popup\r\n    store.dispatch(levelInit({ name: foundLevel.name, goal: foundLevel.goal }));\r\n  };\r\n\r\n  // Hide info popup and start game\r\n  public startGame = (): void => {\r\n    store.dispatch(hidePopup());\r\n    this.gameLoop.start();\r\n  };\r\n\r\n  // Pause all layers/objects and display pause popup\r\n  public pause = (): void => {\r\n    this.gameLoop.pause();\r\n    this.currentLevel.pause();\r\n    store.dispatch(pauseGame());\r\n  };\r\n\r\n  // Resume all layers/objects and hide pause popup\r\n  public resume = (): void => {\r\n    this.gameLoop.start();\r\n    this.currentLevel.resume();\r\n    store.dispatch(resumeGame());\r\n  };\r\n\r\n  // Update score to front-end\r\n  public setScore = (score: number): void => {\r\n    store.dispatch(setScore(score));\r\n\r\n    // Show score popup when the user reached 100%\r\n    if (score >= 100) {\r\n      this.pause();\r\n      store.dispatch(showPopup(Popups.Score));\r\n    }\r\n  };\r\n\r\n  // Get current game score\r\n  public getScore = (): number => {\r\n    return store.getState().game.score;\r\n  };\r\n\r\n  private loop = (frame: number): void => {\r\n    // Loop callback from GameLoop\r\n    this.update(frame);\r\n    this.render();\r\n  };\r\n\r\n  private update = (frame): void => {\r\n    // Update level\r\n    this.currentLevel.update();\r\n\r\n    // Update time every second\r\n    if (frame % fps === 0) {\r\n      store.dispatch(setTime(frame / fps));\r\n    }\r\n  };\r\n\r\n  private render = (): void => {\r\n    // Render level\r\n    this.currentLevel.render();\r\n  };\r\n\r\n  // Update canvas content position after resize\r\n  private resize = (): void => {\r\n    const vpw: number = window.innerWidth;\r\n    const vph: number = window.innerHeight;\r\n    let nvw: number;\r\n    let nvh: number;\r\n\r\n    if (vph / vpw < size[1] / size[0]) {\r\n      nvh = vph;\r\n      nvw = (nvh * size[0]) / size[1];\r\n    } else {\r\n      nvw = vpw;\r\n      nvh = (nvw * size[1]) / size[0];\r\n    }\r\n\r\n    this.game.renderer.resize(nvw, nvh);\r\n\r\n    this.game.stage.scale.set(nvw / size[0], nvh / size[1]);\r\n  };\r\n}\r\n\r\n// Only create one game instance\r\nexport default new Game();\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport game from '../../../../Game/Game.ts';\r\n\r\nimport levels from '../../../../Game/levels/levels.ts';\r\nimport { Screens } from '../../../../enums.ts';\r\nimport { setScreen } from '../../../../actions/appActions';\r\nimport Button from '../../Default/Button';\r\n\r\nconst LevelItem = ({ level }) => (\r\n  <div\r\n    className=\"game-screen-level-item\"\r\n    onClick={() => game.pickLevel(level.id)}\r\n    role=\"button\"\r\n    tabIndex={0}\r\n  >\r\n    <div className=\"game-screen-level-item-content\">\r\n      <div className=\"game-screen-level-thumbnail\">\r\n        <img src={level.thumbnail} alt={level.name} />\r\n      </div>\r\n      <div className=\"game-screen-level-name\">{level.name}</div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\n@connect(dispatch => ({\r\n  dispatch\r\n}))\r\nclass LevelMenu extends React.Component {\r\n  setScreen = screen => {\r\n    const { dispatch } = this.props;\r\n    dispatch(setScreen(screen));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"game-screen-content level-menu\">\r\n        <div className=\"game-screen-item game-screen-title\">Levels</div>\r\n        <div className=\"game-screen-level-picker\">\r\n          {levels.map(level => (\r\n            <LevelItem level={level} key={level.id} />\r\n          ))}\r\n        </div>\r\n        <div className=\"game-screen-item\">\r\n          <Button\r\n            className=\"level-picker-mainmenu-button\"\r\n            fullwidth\r\n            onClick={() => this.setScreen(Screens.MainMenu)}\r\n          >\r\n            Terug\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LevelMenu;\r\n","import React from 'react';\r\n\r\nimport Button from '../../../Default/Button';\r\nimport game from '../../../../../Game/Game.ts';\r\nimport { Screens } from '../../../../../enums.ts';\r\n\r\nconst Pause = ({ setScreen }) => (\r\n  <div className=\"pause-popup\">\r\n    <h1>Pauze</h1>\r\n    <div className=\"pause-popup-buttons\">\r\n      <div className=\"popup-button-container\">\r\n        <Button className=\"popup-button-resume\" onClick={game.resume}>\r\n          Verder spelen\r\n        </Button>\r\n      </div>\r\n      <div className=\"popup-button-container\">\r\n        <Button className=\"popup-button-mainmenu\" onClick={() => setScreen(Screens.MainMenu)}>\r\n          Hoofdmenu\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Pause;\r\n","// Display time in minutes/seconds based on seconds\r\nconst displayTime = seconds => {\r\n  const min = Math.floor(seconds / 60);\r\n  const sec = seconds - min * 60;\r\n\r\n  return `${min.toString().padStart(2, '0')}:${sec.toString().padStart(2, '0')}`;\r\n};\r\n\r\nexport default displayTime;\r\n","import React from 'react';\r\n\r\nimport Button from '../../../Default/Button';\r\nimport { Screens } from '../../../../../enums.ts';\r\nimport displayTime from '../../../../../utils/displayTime';\r\n\r\nconst Score = ({ game, setScreen }) => (\r\n  <div className=\"score-popup\">\r\n    <h1>Gewonnen!</h1>\r\n    <p>{`Tijd: ${displayTime(game.time)}`}</p>\r\n    <p>{`Score: ${game.score}%`}</p>\r\n    <div className=\"pause-popup-buttons\">\r\n      <div className=\"popup-button-container\">\r\n        <Button className=\"popup-button-mainmenu\" onClick={() => setScreen(Screens.MainMenu)}>\r\n          Hoofdmenu\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Score;\r\n","import React from 'react';\r\nimport Button from '../../../Default/Button';\r\nimport game from '../../../../../Game/Game.ts';\r\n\r\nconst Info = ({ level }) => (\r\n  <div className=\"info-popup\">\r\n    <h1>{level.name}</h1>\r\n    <p>{level.goal}</p>\r\n    <div className=\"popup-button-container\">\r\n      <Button className=\"popup-button-start\" onClick={() => game.startGame()}>\r\n        Starten\r\n      </Button>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Info;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { setScreen } from '../../../../../actions/appActions';\r\nimport { Popups } from '../../../../../enums.ts';\r\n\r\nimport Pause from './Pause';\r\nimport Score from './Score';\r\nimport Info from './Info';\r\n\r\n@connect(\r\n  state => ({\r\n    game: state.game,\r\n    level: state.level\r\n  }),\r\n  dispatch => ({\r\n    dispatch\r\n  })\r\n)\r\nclass GamePopups extends React.Component {\r\n  setScreen = screen => {\r\n    const { dispatch } = this.props;\r\n    dispatch(setScreen(screen));\r\n  };\r\n\r\n  render() {\r\n    const { game, level } = this.props;\r\n    let popup;\r\n\r\n    switch (game.currentPopup) {\r\n      case Popups.Pause:\r\n        popup = <Pause setScreen={this.setScreen} />;\r\n        break;\r\n      case Popups.Score:\r\n        popup = <Score setScreen={this.setScreen} game={game} />;\r\n        break;\r\n      case Popups.Info:\r\n        popup = <Info level={level} />;\r\n        break;\r\n      default:\r\n        return null;\r\n    }\r\n\r\n    return (\r\n      <div className=\"game-popup\">\r\n        <div className=\"game-popup-container\">{popup}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GamePopups;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Button from '../../Default/Button';\r\nimport ProgressBar from '../../Default/ProgressBar';\r\nimport game from '../../../../Game/Game.ts';\r\nimport GamePopups from './Popups';\r\nimport displayTime from '../../../../utils/displayTime';\r\nimport numberFormatter from '../../../../utils/numberFormatter';\r\n\r\n@connect(\r\n  state => ({\r\n    game: state.game\r\n  }),\r\n  dispatch => ({\r\n    dispatch\r\n  })\r\n)\r\nclass Game extends React.Component {\r\n  render() {\r\n    const {\r\n      game: { score, time }\r\n    } = this.props;\r\n\r\n    let icon = '';\r\n\r\n    if (score < 20) {\r\n      icon = 'icon-astonished-face';\r\n    } else if (score < 40) {\r\n      icon = 'icon-sad-face';\r\n    } else if (score < 60) {\r\n      icon = 'icon-neutral-face';\r\n    } else if (score < 80) {\r\n      icon = 'icon-smiling-face';\r\n    } else {\r\n      icon = 'icon-laughing-face';\r\n    }\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-overlay-ui\">\r\n          <div className=\"top-bar\">\r\n            <Button onClick={game.pause}>\r\n              <i className=\"icon-pause\" />\r\n            </Button>\r\n          </div>\r\n          <div className=\"bottom-bar\">\r\n            <div className=\"bottom-bar-progress\">\r\n              <div className=\"bottom-bar-progress-bar\">\r\n                <ProgressBar progress={score} description={v => `${numberFormatter(v)}%`} />\r\n              </div>\r\n              <div className=\"bottom-bar-progress-icon\">\r\n                <i className={icon} />\r\n              </div>\r\n            </div>\r\n            <div className=\"bottom-bar-time\">{`Tijd: ${displayTime(time)}`}</div>\r\n          </div>\r\n        </div>\r\n        <GamePopups />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","// Format number\r\nexport default num => Math.floor(num);\r\n","import React from 'react';\r\n\r\nimport { Screens } from '../../../enums.ts';\r\n\r\nimport LoadingScreen from './LoadingScreen';\r\nimport MainMenu from './MainMenu';\r\nimport SettingsMenu from './SettingsMenu';\r\nimport LevelMenu from './LevelMenu';\r\nimport Game from './Game';\r\n\r\nconst GameScreens = ({ activeScreen }) => {\r\n  let screen = null;\r\n\r\n  if (activeScreen === Screens.Loading) {\r\n    screen = <LoadingScreen />;\r\n  }\r\n\r\n  if (activeScreen === Screens.MainMenu) {\r\n    screen = <MainMenu />;\r\n  }\r\n\r\n  if (activeScreen === Screens.LevelMenu) {\r\n    screen = <LevelMenu />;\r\n  }\r\n\r\n  if (activeScreen === Screens.SettingsMenu) {\r\n    screen = <SettingsMenu />;\r\n  }\r\n\r\n  if (activeScreen === Screens.Game) {\r\n    return <Game />;\r\n  }\r\n\r\n  return <div className=\"game-screen\">{screen}</div>;\r\n};\r\n\r\nexport default GameScreens;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport GameScreens from './GameScreens';\r\n\r\n@connect(\r\n  state => ({\r\n    activeScreen: state.app.activeScreen\r\n  }),\r\n  dispatch => ({\r\n    dispatch\r\n  })\r\n)\r\nclass App extends React.Component {\r\n  render() {\r\n    const { activeScreen } = this.props;\r\n\r\n    return (\r\n      <div className=\"app\">\r\n        <div id=\"game\" className=\"game\" />\r\n        <GameScreens activeScreen={activeScreen} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import 'babel-polyfill';\r\n\r\nimport GameUI from './GameUI/index';\r\nimport game from './Game/Game';\r\n\r\nconst gameUI = new GameUI();\r\n\r\ngameUI.render();\r\ngame.init();\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\n// Main react component\r\nimport App from './components/App';\r\n\r\n// Redux front-end application state\r\nimport store from '../store';\r\n\r\n// Styles\r\nimport './assets/styles/style.scss';\r\n\r\n// Initialize React.JS GameUI\r\nclass GameUI {\r\n  render() {\r\n    ReactDOM.render(\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>,\r\n      document.getElementById('root')\r\n    );\r\n  }\r\n}\r\n\r\nexport default GameUI;\r\n"],"sourceRoot":""}