{"version":3,"sources":["stores/Game/Round/Step.ts","stores/Game/Player.ts","stores/Game/Round/index.ts","utils/shuffle.ts","stores/Game/index.ts","stores/Router.ts","stores/index.ts","contexts/index.tsx","hooks/useStores.tsx","components/pages/GameNew.tsx","components/pages/GameRound/Scores.tsx","components/pages/GameRound/ExpectedTricks.tsx","components/pages/GameRound/RoundStep.tsx","components/ScoreBoard.tsx","components/pages/GameRound/index.tsx","components/pages/GameFinished.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["Step","Player","name","this","id","uuidV1","observable","Round","roundNumber","guessOrder","amountOfTricks","Guess","action","amount","guessIndex","length","guessedTricks","reduce","accumulator","guessedTrick","push","playerId","step","Play","Score","correct","tricks","calcTricks","scoreIndex","scores","score","store","game","nextRound","shuffle","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","Game","addPlayer","roundHistory","maxTricks","minTricks","player","players","playerOrder","filter","orderId","i","roundTricks","loopTricksBack","router","updateRoute","shuffleOffset","pointer","round","computed","Router","route","storesContext","React","createContext","stores","useStores","useContext","GameNew","observer","setMinTricks","setMaxTricks","removePlayer","startGame","useState","setName","className","style","marginTop","type","placeholder","value","onChange","e","target","onClick","scope","colSpan","map","key","width","htmlFor","parseInt","Scores","tricksWrong","setTricksWrong","currentRound","setScore","playerToSetScore","find","setRoundScore","padding","ExpectedTricks","expectedTricks","setExpectedTricks","guessTricks","playerToGuess","RoundStep","setScores","ScoreBoard","rounds","RoundRow","TotalRow","tdStyle","color","totals","Map","forEach","has","set","get","GameRound","playerToShuffle","GameFinished","App","page","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.57b23533.chunk.js","sourcesContent":["export enum Step {\n  Guess,\n  Play,\n  Score\n}\n","import { observable } from \"mobx\";\nimport { v1 as uuidV1 } from \"uuid\";\n\nexport class Player {\n  @observable id: string;\n  @observable name: string;\n\n  constructor(name: string) {\n    this.name = name;\n    this.id = uuidV1();\n  }\n}\n","import { observable, action } from \"mobx\";\n\nimport { GuessedTricks } from \"./GuessedTricks\";\nimport { Score } from \"./Score\";\nimport { Step } from \"./Step\";\nimport store from \"../..\";\n\nexport class Round {\n  @observable roundNumber: number;\n  @observable guessOrder: string[];\n  @observable amountOfTricks: number;\n\n  @observable step: Step = Step.Guess;\n\n  @observable guessIndex: number = 0;\n  @observable guessedTricks: GuessedTricks[] = [];\n\n  @observable scoreIndex: number = 0;\n  @observable scores: Score[] = [];\n\n  constructor(\n    roundNumber: number,\n    guessOrder: string[],\n    amountOfTricks: number\n  ) {\n    this.roundNumber = roundNumber;\n    this.guessOrder = guessOrder;\n    this.amountOfTricks = amountOfTricks;\n  }\n\n  @action\n  guessTricks = (amount: number) => {\n    if (amount == null || amount < 0 || amount > this.amountOfTricks) {\n      return;\n    }\n\n    // The tricks can't exactly be the totalTricks\n    if (this.guessIndex === this.guessOrder.length - 1) {\n      const totalTricks = this.guessedTricks.reduce(\n        (accumulator, guessedTrick) => accumulator + guessedTrick.amount,\n        0\n      );\n\n      if (totalTricks + amount === this.amountOfTricks) {\n        return;\n      }\n    }\n\n    this.guessedTricks.push({\n      playerId: this.guessOrder[this.guessIndex],\n      amount\n    });\n\n    this.guessIndex++;\n\n    if (this.guessIndex === this.guessOrder.length) {\n      this.step = Step.Play;\n    }\n  };\n\n  @action\n  setScores = () => {\n    this.step = Step.Score;\n  };\n\n  @action\n  setScore = (correct: boolean, tricks: number) => {\n    let calcTricks;\n\n    if (correct) {\n      calcTricks = this.guessedTricks[this.scoreIndex].amount;\n    } else {\n      if (tricks == null) return;\n      calcTricks = tricks ? tricks : 1;\n    }\n\n    this.scores.push({\n      playerId: this.guessOrder[this.scoreIndex],\n      score: correct ? 10 + calcTricks * 2 : calcTricks * 2 * -1\n    });\n\n    this.scoreIndex++;\n\n    if (this.scoreIndex >= this.guessOrder.length) {\n      store.game.nextRound();\n    }\n  };\n}\n","const shuffle = (array: any[]) => {\n  let currentIndex = array.length,\n    temporaryValue,\n    randomIndex;\n\n  while (0 !== currentIndex) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n};\n\nexport default shuffle;\n","import { observable, action, computed } from \"mobx\";\n\nimport store from \"../index\";\n\nimport { Player } from \"./Player\";\nimport { Round } from \"./Round\";\n\nimport shuffle from \"../../utils/shuffle\";\n\nexport class Game {\n  @observable roundNumber: number = 0;\n  @observable roundHistory: Round[] = [];\n  @observable minTricks: number = 1;\n  @observable maxTricks: number = 10;\n  @observable players: Player[] = [];\n  @observable playerOrder: string[] = [];\n  @observable roundTricks: number[] = [];\n  @observable loopTricksBack: boolean = true;\n\n  constructor() {\n    this.addPlayer(\"Stefan\");\n  }\n\n  @action\n  setMinTricks = (tricks: number) => {\n    if (tricks < 1 || tricks > this.maxTricks) return;\n\n    this.minTricks = tricks;\n  };\n\n  @action\n  setMaxTricks = (tricks: number) => {\n    if (tricks < this.minTricks) return;\n\n    this.maxTricks = tricks;\n  };\n\n  @action\n  addPlayer = (name: string) => {\n    const player = new Player(name);\n    this.players.push(player);\n    this.playerOrder.push(player.id);\n  };\n\n  @action\n  removePlayer = (id: string) => {\n    this.players = this.players.filter(player => player.id !== id);\n    this.playerOrder = this.playerOrder.filter(orderId => orderId !== id);\n  };\n\n  @action\n  resetGame = () => {\n    this.roundNumber = 0;\n    this.roundHistory = [];\n    this.minTricks = 1;\n    this.maxTricks = 10;\n    this.players = [];\n    this.playerOrder = [];\n  };\n\n  @action\n  startGame = () => {\n    if (this.players.length < 2) return;\n\n    for (let i = this.minTricks; i <= this.maxTricks; i += 1) {\n      this.roundTricks.push(i);\n    }\n\n    if (this.loopTricksBack) {\n      for (let i = this.maxTricks; i >= this.minTricks; i -= 1) {\n        this.roundTricks.push(i);\n      }\n    }\n\n    this.playerOrder = shuffle(this.playerOrder);\n    this.nextRound();\n    store.router.updateRoute(\"round\");\n  };\n\n  @action\n  nextRound = () => {\n    if (this.roundNumber >= this.roundTricks.length) {\n      store.router.updateRoute(\"finished\");\n      return;\n    }\n\n    this.roundNumber += 1;\n\n    const shuffleOffset: number = (this.roundNumber - 1) % this.players.length;\n    const guessOrder: string[] = [];\n\n    for (let i = 0; i < this.playerOrder.length; i += 1) {\n      const pointer = (i + shuffleOffset) % this.playerOrder.length;\n      guessOrder.push(this.playerOrder[pointer]);\n    }\n\n    const round = new Round(\n      this.roundNumber,\n      guessOrder,\n      this.roundTricks[this.roundNumber - 1]\n    );\n\n    this.roundHistory.push(round);\n  };\n\n  @computed get currentRound() {\n    return this.roundHistory[this.roundHistory.length - 1];\n  }\n}\n","import { observable, action } from \"mobx\";\n\nexport class Router {\n  @observable route: string = \"new\";\n\n  @action\n  updateRoute = (route: string) => {\n    this.route = route;\n  };\n}\n","import { observable } from \"mobx\";\n\nimport { Game } from \"./Game\";\nimport { Router } from \"./Router\";\n\nclass Store {\n  @observable public game: Game;\n  @observable public router: Router;\n\n  constructor() {\n    this.game = new Game();\n    this.router = new Router();\n  }\n}\n\nexport default new Store();\n","import React from \"react\";\nimport stores from \"../stores\";\n\nexport const storesContext = React.createContext(stores);\n","import React from \"react\";\nimport { storesContext } from \"../contexts\";\n\nexport const useStores = () => React.useContext(storesContext);\n","import React, { useState } from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { useStores } from \"../../hooks/useStores\";\n\nexport const GameNew = observer(() => {\n  const {\n    game: {\n      minTricks,\n      setMinTricks,\n      maxTricks,\n      setMaxTricks,\n      players,\n      addPlayer,\n      removePlayer,\n      startGame\n    }\n  } = useStores();\n  const [name, setName] = useState(\"\");\n\n  const savePlayer = () => {\n    addPlayer(name);\n    setName(\"\");\n  };\n\n  return (\n    <div className=\"card\" style={{ marginTop: \"1rem\" }}>\n      <h5 className=\"card-header\">Nieuw spel</h5>\n      <div className=\"card-body\">\n        <div className=\"row\">\n          <div className=\"col-sm\">\n            <div className=\"input-group mb-3\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"Naam\"\n                value={name}\n                onChange={e => setName(e.target.value)}\n              />\n              <div className=\"input-group-append\">\n                <button\n                  className=\"btn btn-primary\"\n                  type=\"button\"\n                  onClick={savePlayer}\n                >\n                  Toevoegen\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"table-responsive-xl\">\n          <table className=\"table table-striped\">\n            <thead>\n              <tr>\n                <th scope=\"col\" colSpan={2}>\n                  Spelers\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              {players.length ? (\n                players.map(player => (\n                  <tr key={player.id}>\n                    <td>{player.name}</td>\n                    <td style={{ width: \"10%\" }}>\n                      <button\n                        className=\"btn btn-sm btn-danger\"\n                        type=\"button\"\n                        onClick={() => removePlayer(player.id)}\n                      >\n                        Verwijderen\n                      </button>\n                    </td>\n                  </tr>\n                ))\n              ) : (\n                <tr>\n                  <td>Nog geen spelers toegevoegd.</td>\n                </tr>\n              )}\n            </tbody>\n          </table>\n        </div>\n        <div className=\"row\">\n          <div className=\"col\">\n            <div className=\"form-group\">\n              <label htmlFor=\"minTricks\">Minimaal aantal slagen</label>\n              <input\n                type=\"number\"\n                className=\"form-control\"\n                id=\"minTricks\"\n                value={minTricks}\n                onChange={e => setMinTricks(parseInt(e.target.value, 10))}\n              />\n            </div>\n          </div>\n          <div className=\"col\">\n            <div className=\"form-group\">\n              <label htmlFor=\"maxTricks\">Maximaal aantal slagen</label>\n              <input\n                type=\"number\"\n                className=\"form-control\"\n                id=\"maxTricks\"\n                value={maxTricks}\n                onChange={e => setMaxTricks(parseInt(e.target.value, 10))}\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col\">\n            <button\n              type=\"button\"\n              className=\"btn btn-primary btn-lg btn-block\"\n              onClick={startGame}\n            >\n              Beginnen\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n});\n","import React, { useState } from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { Game } from \"../../../stores/Game\";\n\ninterface IProps {\n  game: Game;\n}\n\nexport const Scores = observer(({ game }: IProps) => {\n  const [tricksWrong, setTricksWrong] = useState(\"\");\n  const {\n    players,\n    currentRound: { scoreIndex, guessOrder, setScore, guessedTricks }\n  } = game;\n\n  const playerToSetScore = players.find(\n    player => player.id === guessOrder[scoreIndex]\n  );\n\n  const guessedTrick = guessedTricks.find(\n    guessedTrick => guessedTrick.playerId === guessOrder[scoreIndex]\n  );\n\n  if (!playerToSetScore || !guessedTrick) return null;\n\n  const setRoundScore = (correct: boolean) => {\n    if (tricksWrong === \"\" && !correct) return;\n    setScore(correct, parseInt(tricksWrong, 10));\n    setTricksWrong(\"\");\n  };\n\n  return (\n    <>\n      Behaalde score voor: <b>{playerToSetScore.name}</b>. Verwachte slagen:{\" \"}\n      <b>{guessedTrick.amount}</b>\n      <div className=\"row\">\n        <div className=\"col-sm\">\n          <button\n            className=\"btn btn-success btn-block\"\n            type=\"button\"\n            onClick={() => setRoundScore(true)}\n          >\n            Goed\n          </button>\n        </div>\n        <div className=\"col-sm\">\n          <div className=\"input-group mb-3\">\n            <input\n              type=\"number\"\n              className=\"form-control\"\n              placeholder=\"Slagen ernaast\"\n              value={tricksWrong}\n              onChange={e => setTricksWrong(e.target.value)}\n            />\n            <div className=\"input-group-append\">\n              <button\n                className=\"btn btn-danger\"\n                style={{ padding: \"0 4rem\" }}\n                type=\"button\"\n                onClick={() => setRoundScore(false)}\n              >\n                Fout\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n});\n","import React, { useState } from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { Game } from \"../../../stores/Game\";\n\ninterface IProps {\n  game: Game;\n}\n\nexport const ExpectedTricks = observer(({ game }: IProps) => {\n  const [expectedTricks, setExpectedTricks] = useState(\"\");\n  const {\n    players,\n    currentRound: { guessIndex, guessOrder, guessTricks }\n  } = game;\n\n  const playerToGuess = players.find(\n    player => player.id === guessOrder[guessIndex]\n  );\n\n  if (!playerToGuess) return null;\n\n  const guessExpectedTricks = () => {\n    if (expectedTricks === \"\") return;\n    guessTricks(parseInt(expectedTricks, 10));\n    setExpectedTricks(\"\");\n  };\n\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"col-sm\">\n          <p className=\"text-left\">\n            Verwachte slagen voor <b>{playerToGuess.name}</b>\n          </p>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-sm\">\n          <div className=\"input-group mb-3\">\n            <input\n              type=\"number\"\n              className=\"form-control\"\n              placeholder=\"Verwachte aantal slagen\"\n              value={expectedTricks}\n              onChange={e => setExpectedTricks(e.target.value)}\n            />\n            <div className=\"input-group-append\">\n              <button\n                className=\"btn btn-primary\"\n                type=\"button\"\n                onClick={guessExpectedTricks}\n              >\n                Toevoegen\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n});\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { Step } from \"../../../stores/Game/Round/Step\";\nimport { Game } from \"../../../stores/Game\";\nimport { Scores } from \"./Scores\";\nimport { ExpectedTricks } from \"./ExpectedTricks\";\n\ninterface IProps {\n  game: Game;\n}\n\nexport const RoundStep = observer(({ game }: IProps) => {\n  const {\n    currentRound: { step, setScores }\n  } = game;\n\n  switch (step) {\n    case Step.Guess:\n      return <ExpectedTricks game={game} />;\n    case Step.Play:\n      return (\n        <button\n          className=\"btn btn-primary btn-block\"\n          type=\"button\"\n          onClick={setScores}\n        >\n          Scores invoeren\n        </button>\n      );\n    case Step.Score:\n      return <Scores game={game} />;\n  }\n});\n","import React, { Fragment } from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { Round } from \"../stores/Game/Round\";\nimport { Player } from \"../stores/Game/Player\";\n\ninterface IProps {\n  players: Player[];\n  rounds: Round[];\n}\n\nexport const ScoreBoard = observer(({ players, rounds }: IProps) => {\n  return (\n    <div className=\"table-responsive-xl\">\n      <table className=\"table table-striped\">\n        <thead>\n          <tr>\n            <th scope=\"col\">Ronde</th>\n            <th scope=\"col\">Slagen</th>\n            {players.map(player => (\n              <Fragment key={player.id}>\n                <th scope=\"col\">{player.name}</th>\n                <th scope=\"col\">Verwacht</th>\n              </Fragment>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {rounds.map(round => (\n            <RoundRow round={round} players={players} key={round.roundNumber} />\n          ))}\n          <TotalRow rounds={rounds} players={players} />\n        </tbody>\n      </table>\n    </div>\n  );\n});\n\ninterface RoundRowProps {\n  round: Round;\n  players: Player[];\n}\n\nconst RoundRow = observer(({ round, players }: RoundRowProps) => {\n  const tdStyle = { padding: \"0.25rem 0.75rem\" };\n\n  return (\n    <tr key={round.roundNumber}>\n      <td style={tdStyle}>{round.roundNumber}</td>\n      <td style={tdStyle}>{round.amountOfTricks}</td>\n      {players.map(player => {\n        const guessedTrick = round.guessedTricks.find(\n          guessedTrick => guessedTrick.playerId === player.id\n        );\n\n        if (!round.scores.length || round.scores.length !== players.length) {\n          return (\n            <Fragment key={player.id}>\n              <td style={tdStyle}>-</td>\n              <td style={tdStyle}>\n                {guessedTrick ? guessedTrick.amount : \"-\"}\n              </td>\n            </Fragment>\n          );\n        }\n\n        const score = round.scores.find(score => score.playerId === player.id);\n\n        return (\n          <Fragment key={player.id}>\n            <td style={tdStyle}>{score?.score}</td>\n            <td\n              style={{\n                ...tdStyle,\n                ...(score && score.score < 0 ? { color: \"red\" } : {})\n              }}\n            >\n              {guessedTrick?.amount}\n            </td>\n          </Fragment>\n        );\n      })}\n    </tr>\n  );\n});\n\ninterface TotalRowProps {\n  rounds: Round[];\n  players: Player[];\n}\n\nconst TotalRow = observer(({ rounds, players }: TotalRowProps) => {\n  const totals = new Map();\n\n  rounds.forEach(round => {\n    round.scores.forEach(score => {\n      if (totals.has(score.playerId)) {\n        totals.set(score.playerId, totals.get(score.playerId) + score.score);\n      } else {\n        totals.set(score.playerId, score.score);\n      }\n    });\n  });\n\n  return (\n    <tr>\n      <th colSpan={2}>Totaal</th>\n      {players.map(player => {\n        const score = totals.get(player.id);\n\n        return (\n          <td key={player.id} colSpan={2} className=\"twee\">\n            {score ? score : \"-\"}\n          </td>\n        );\n      })}\n    </tr>\n  );\n});\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { useStores } from \"../../../hooks/useStores\";\nimport { RoundStep } from \"./RoundStep\";\nimport { ScoreBoard } from \"../../ScoreBoard\";\n\nexport const GameRound = observer(() => {\n  const {\n    game,\n    game: {\n      roundNumber,\n      players,\n      roundHistory,\n      currentRound: { guessOrder, amountOfTricks }\n    }\n  } = useStores();\n\n  const playerToShuffle = players.find(\n    player => player.id === guessOrder[players.length - 1]\n  );\n\n  if (!playerToShuffle) return null;\n\n  return (\n    <div className=\"card\" style={{ marginTop: \"1rem\" }}>\n      <h5 className=\"card-header\">\n        Ronde {roundNumber} - Aantal slagen <b>{amountOfTricks}</b>\n      </h5>\n      <div className=\"card-body\">\n        <div className=\"row\">\n          <div className=\"col\">\n            <b>{playerToShuffle.name}</b> moet deze ronde schudden\n          </div>\n        </div>\n        <hr />\n        <RoundStep game={game} />\n        <div className=\"row\">\n          <div className=\"col\">\n            <ScoreBoard rounds={roundHistory} players={players} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n});\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { useStores } from \"../../hooks/useStores\";\nimport { ScoreBoard } from \"../ScoreBoard\";\n\nexport const GameFinished = observer(() => {\n  const {\n    game: { players, roundHistory }\n  } = useStores();\n\n  return (\n    <div className=\"card\" style={{ marginTop: \"1rem\" }}>\n      <h5 className=\"card-header\">Klaar!</h5>\n      <div className=\"card-body\">\n        <ScoreBoard players={players} rounds={roundHistory} />\n      </div>\n    </div>\n  );\n});\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { useStores } from \"../hooks/useStores\";\nimport { GameNew } from \"./pages/GameNew\";\nimport { GameRound } from \"./pages/GameRound\";\nimport { GameFinished } from \"./pages/GameFinished\";\n\nconst App: React.FC = observer(() => {\n  const {\n    router: { route }\n  } = useStores();\n\n  let page;\n\n  switch (route) {\n    case \"new\":\n      page = <GameNew />;\n      break;\n    case \"round\":\n      page = <GameRound />;\n      break;\n    case \"finished\":\n      page = <GameFinished />;\n      break;\n  }\n\n  return <div className=\"container\">{page}</div>;\n});\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"./styles/theme.scss\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}