{"version":3,"sources":["stores/Game/Round/Step.ts","stores/Game/Player.ts","stores/Game/Round/index.ts","stores/Router/Route.ts","utils/shuffle.ts","utils/random.ts","apis/scoresApi.ts","stores/Game/index.ts","stores/Router/index.ts","stores/index.ts","contexts/index.tsx","hooks/useStores.tsx","components/pages/GameNew/PlayerList/ColorPicker.tsx","components/pages/GameNew/PlayerList/index.tsx","components/pages/GameNew/NewPlayer.tsx","components/pages/GameNew/GameOptions.tsx","components/pages/GameNew/index.tsx","components/pages/GameRound/Scores.tsx","components/pages/GameRound/ExpectedTricks.tsx","components/pages/GameRound/RoundStep.tsx","components/ScoreBoard.tsx","components/pages/GameRound/index.tsx","components/pages/GameFinished.tsx","components/pages/GameStart.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["Step","Player","name","color","this","id","uuidV1","observable","Route","Round","persist","roundNumber","guessOrder","amountOfTricks","Guess","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","min","max","saveGame","rounds","players","fetch","process","method","mode","cache","credentials","headers","redirect","referrerPolicy","body","JSON","stringify","toJS","then","response","console","log","catch","err","error","attack","Audio","yeah","Game","currentRound","guessedTricks","reduce","accumulator","guessedTrick","amount","guessIndex","roundHistory","action","tricks","maxTricks","minTricks","amountOfRounds","player","colors","push","playerOrder","idx","findIndex","filter","orderId","loopTricksBack","shuffleTricks","fullyRandom","roundTricks","store","router","updateRoute","New","i","firstToShuffle","nextRound","increment","play","Finished","shuffleOffset","pointer","round","pop","lastGuess","totalTricks","playerId","step","Play","correct","calcTricks","scoreIndex","abs","score","totalScore","lastRound","lastScore","scores","find","End","Score","computed","soundtrack","loop","Router","Start","route","pause","hydrate","hydrateStores","a","async","loaded","game","localStorage","getItem","removeItem","setItem","create","storage","key","value","storesContext","React","createContext","stores","useStores","useContext","ColorPicker","pickColor","map","className","type","onClick","style","backgroundColor","height","width","margin","border","PlayerList","observer","removePlayer","scope","colSpan","NewPlayer","addPlayer","useState","setName","placeholder","onChange","e","target","GameOptions","toggleFullyRandom","setMinTricks","setMaxTricks","setAmountOfRounds","toggleLoopTricksBack","toggleShuffleTricks","checked","marginLeft","htmlFor","parseInt","GameNew","startGame","marginTop","position","bottom","left","Scores","setScore","playerToSetScore","role","Array","v","ExpectedTricks","guessTricks","playerToGuess","RoundStep","setScores","ScoreBoard","reverse","data","row","forEach","RoundRows","TotalRow","top","right","strokeDasharray","dataKey","stroke","RoundRow","tdStyle","padding","totals","Map","has","set","get","GameRound","resetRound","resetGame","playerToShuffle","window","confirm","GameFinished","GameStart","App","page","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.364bd413.chunk.js","sourcesContent":["export enum Step {\n  Guess,\n  Play,\n  Score,\n  End\n}\n","import { observable } from \"mobx\";\nimport { v1 as uuidV1 } from \"uuid\";\n\nexport class Player {\n  @observable id: string;\n  @observable name: string;\n  @observable color: string;\n\n  constructor(name: string, color: string) {\n    this.name = name;\n    this.id = uuidV1();\n    this.color = color;\n  }\n}\n","import { observable } from \"mobx\";\n\nimport { GuessedTricks } from \"./GuessedTricks\";\nimport { Score } from \"./Score\";\nimport { Step } from \"./Step\";\nimport { persist } from \"mobx-persist\";\n\nexport class Round {\n  @observable @persist roundNumber: number;\n  @observable @persist(\"list\") guessOrder: string[];\n  @observable @persist amountOfTricks: number;\n\n  @observable @persist step: Step = Step.Guess;\n\n  @observable @persist guessIndex: number = 0;\n  @observable @persist(\"list\") guessedTricks: GuessedTricks[] = [];\n\n  @observable @persist scoreIndex: number = 0;\n  @observable @persist scores: Score[] = [];\n\n  constructor(\n    roundNumber: number,\n    guessOrder: string[],\n    amountOfTricks: number\n  ) {\n    this.roundNumber = roundNumber;\n    this.guessOrder = guessOrder;\n    this.amountOfTricks = amountOfTricks;\n  }\n}\n","export enum Route {\n  Start,\n  New,\n  Round,\n  Finished\n}\n","const shuffle = (array: any[]) => {\n  let currentIndex = array.length,\n    temporaryValue,\n    randomIndex;\n\n  while (0 !== currentIndex) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n};\n\nexport default shuffle;\n","const random = (min: number, max: number) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nexport default random;\n","import { Round } from \"../stores/Game/Round\";\nimport { Player } from \"../stores/Game/Player\";\nimport { toJS } from \"mobx\";\n\nconst API_URL = process.env.REACT_APP_API_URL;\n\nexport const saveGame = (rounds: Round[], players: Player[]) =>\n  fetch(`${API_URL}/game`, {\n    method: \"POST\",\n    mode: \"cors\",\n    cache: \"no-cache\",\n    credentials: \"same-origin\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    redirect: \"follow\",\n    referrerPolicy: \"no-referrer\",\n    body: JSON.stringify({ rounds: toJS(rounds), players: toJS(players) })\n  })\n    .then(response => {\n      console.log(response);\n    })\n    .catch(err => {\n      console.error(err);\n    });\n\nexport const getPreviousGames = () => {};\n","import { observable, action, computed } from \"mobx\";\n\nimport store from \"../index\";\n\nimport { Player } from \"./Player\";\nimport { Round } from \"./Round\";\n\nimport shuffle from \"../../utils/shuffle\";\nimport { Step } from \"./Round/Step\";\nimport { persist } from \"mobx-persist\";\nimport { Route } from \"../Router/Route\";\nimport random from \"../../utils/random\";\nimport { saveGame } from \"../../apis/scoresApi\";\n\nconst attack = new Audio(`${process.env.PUBLIC_URL}/audio/attack.mp3`);\n\nconst yeah = new Audio(`${process.env.PUBLIC_URL}/audio/yeah.mp3`);\n\nexport class Game {\n  @observable @persist roundNumber: number = 0;\n  @observable @persist(\"list\") roundHistory: Round[] = [];\n  @observable @persist minTricks: number = 1;\n  @observable @persist maxTricks: number = 10;\n  @observable @persist amountOfRounds: number = 20;\n  @observable @persist(\"list\") players: Player[] = [];\n  @observable @persist(\"list\") playerOrder: string[] = [];\n  @observable @persist(\"list\") roundTricks: number[] = [];\n  @observable @persist loopTricksBack: boolean = true;\n  @observable @persist shuffleTricks: boolean = false;\n  @observable @persist fullyRandom: boolean = false;\n  @observable @persist firstToShuffle: number;\n  @observable @persist(\"list\") colors: string[] = [\n    \"#007bff\",\n    \"#6610f2\",\n    \"#6f42c1\",\n    \"#e83e8c\",\n    \"#dc3545\",\n    \"#fd7e14\",\n    \"#ffc107\",\n    \"#28a745\",\n    \"#20c997\",\n    \"#17a2b8\"\n  ];\n\n  @action\n  setMinTricks = (tricks: number): void => {\n    if (tricks < 1 || tricks > this.maxTricks) return;\n\n    this.minTricks = tricks;\n  };\n\n  @action\n  setMaxTricks = (tricks: number): void => {\n    if (tricks < this.minTricks) return;\n\n    this.maxTricks = tricks;\n  };\n\n  @action setAmountOfRounds = (rounds: number): void => {\n    if (rounds < 1) return;\n\n    this.amountOfRounds = rounds;\n  };\n\n  @action\n  addPlayer = (name: string): void => {\n    const player = new Player(\n      name,\n      this.colors[random(0, this.colors.length - 1)]\n    );\n    this.players.push(player);\n    this.playerOrder.push(player.id);\n  };\n\n  @action\n  pickColor = (id: string, color: string): void => {\n    const idx = this.players.findIndex(player => player.id === id);\n    this.players[idx].color = color;\n  };\n\n  @action\n  removePlayer = (id: string): void => {\n    this.players = this.players.filter(player => player.id !== id);\n    this.playerOrder = this.playerOrder.filter(orderId => orderId !== id);\n  };\n\n  @action\n  toggleLoopTricksBack = (): void => {\n    this.loopTricksBack = !this.loopTricksBack;\n  };\n\n  @action\n  toggleShuffleTricks = (): void => {\n    this.shuffleTricks = !this.shuffleTricks;\n  };\n\n  @action\n  toggleFullyRandom = (): void => {\n    this.fullyRandom = !this.fullyRandom;\n  };\n\n  @action\n  resetGame = (): void => {\n    this.roundNumber = 0;\n    this.roundHistory = [];\n    this.minTricks = 1;\n    this.maxTricks = 10;\n    this.players = [];\n    this.playerOrder = [];\n    this.roundTricks = [];\n    this.loopTricksBack = true;\n    this.shuffleTricks = false;\n    this.fullyRandom = false;\n\n    store.router.updateRoute(Route.New);\n  };\n\n  @action\n  startGame = (): void => {\n    if (this.players.length < 2) return;\n\n    if (this.fullyRandom) {\n      for (let i = 0; i < this.amountOfRounds; i += 1) {\n        this.roundTricks.push(random(this.minTricks, this.maxTricks));\n      }\n    } else {\n      for (let i = this.minTricks; i <= this.maxTricks; i += 1) {\n        this.roundTricks.push(i);\n      }\n\n      if (this.loopTricksBack) {\n        for (let i = this.maxTricks; i >= this.minTricks; i -= 1) {\n          this.roundTricks.push(i);\n        }\n      }\n\n      if (this.shuffleTricks) {\n        this.roundTricks = shuffle(this.roundTricks);\n      }\n    }\n\n    this.firstToShuffle = random(0, this.players.length - 1);\n    this.nextRound();\n    store.router.updateRoute(Route.Round);\n  };\n\n  @action\n  nextRound = (increment: boolean = true): void => {\n    if (this.roundNumber >= this.roundTricks.length) {\n      yeah.play();\n      store.router.updateRoute(Route.Finished);\n\n      saveGame(this.roundHistory, this.players);\n\n      return;\n    }\n\n    if (increment) this.roundNumber += 1;\n\n    const shuffleOffset: number =\n      (this.roundNumber + this.firstToShuffle) % this.players.length;\n    const guessOrder: string[] = [];\n\n    for (let i = 0; i < this.playerOrder.length; i += 1) {\n      const pointer = (i + shuffleOffset) % this.playerOrder.length;\n      guessOrder.push(this.playerOrder[pointer]);\n    }\n\n    const round = new Round(\n      this.roundNumber,\n      guessOrder,\n      this.roundTricks[this.roundNumber - 1]\n    );\n\n    this.roundHistory.push(round);\n  };\n\n  @action\n  resetRound = (): void => {\n    this.roundHistory.pop();\n    this.nextRound(false);\n  };\n\n  @action\n  guessTricks = (amount: number) => {\n    if (\n      amount == null ||\n      amount < 0 ||\n      amount > this.currentRound.amountOfTricks\n    ) {\n      return;\n    }\n\n    // The tricks can't exactly be the totalTricks\n    if (this.lastGuess) {\n      // last guess of round\n      if (this.totalTricks + amount === this.currentRound.amountOfTricks) {\n        return;\n      }\n    }\n\n    this.currentRound.guessedTricks.push({\n      playerId: this.currentRound.guessOrder[this.currentRound.guessIndex],\n      amount\n    });\n\n    this.currentRound.guessIndex++;\n\n    if (this.currentRound.guessIndex === this.currentRound.guessOrder.length) {\n      attack.play();\n      this.currentRound.step = Step.Play;\n    }\n  };\n\n  @action\n  setScore = (correct: boolean, tricks: number) => {\n    let calcTricks;\n\n    const guessedTricks = this.currentRound.guessedTricks[\n      this.currentRound.scoreIndex\n    ].amount;\n    const playerId = this.currentRound.guessOrder[this.currentRound.scoreIndex];\n\n    if (correct) {\n      calcTricks = guessedTricks;\n    } else {\n      if (tricks == null) return;\n      calcTricks = Math.abs(guessedTricks - tricks);\n    }\n\n    const score = correct ? 10 + calcTricks * 2 : calcTricks * 2 * -1;\n    let totalScore: number = score;\n\n    if (this.lastRound) {\n      const lastScore = this.lastRound.scores.find(\n        score => score.playerId === playerId\n      );\n\n      totalScore += lastScore?.totalScore || 0;\n    }\n\n    this.currentRound.scores.push({\n      playerId,\n      score,\n      totalScore\n    });\n\n    this.currentRound.scoreIndex++;\n\n    if (this.currentRound.scoreIndex >= this.currentRound.guessOrder.length) {\n      this.currentRound.step = Step.End;\n    }\n  };\n\n  @action\n  setScores = () => {\n    this.currentRound.step = Step.Score;\n  };\n\n  @computed\n  get totalTricks(): number {\n    return this.currentRound.guessedTricks.reduce(\n      (accumulator, guessedTrick) => accumulator + guessedTrick.amount,\n      0\n    );\n  }\n\n  @computed\n  get lastGuess(): boolean {\n    return (\n      this.currentRound.guessIndex === this.currentRound.guessOrder.length - 1\n    );\n  }\n\n  @computed get currentRound(): Round {\n    return this.roundHistory[this.roundHistory.length - 1];\n  }\n\n  @computed get lastRound(): Round | null {\n    if (this.roundHistory?.length < 2) return null;\n\n    return this.roundHistory[this.roundHistory.length - 2];\n  }\n}\n","import { observable, action } from \"mobx\";\nimport { persist } from \"mobx-persist\";\n\nimport { Route } from \"./Route\";\n\nconst soundtrack = new Audio(`${process.env.PUBLIC_URL}/audio/soundtrack.mp3`);\nsoundtrack.loop = true;\n\nexport class Router {\n  @observable @persist route: Route = Route.Start;\n\n  @action\n  updateRoute = (route: Route) => {\n    if (route === Route.New) {\n      soundtrack.play();\n    } else {\n      soundtrack.pause();\n    }\n\n    this.route = route;\n  };\n}\n","import { observable } from \"mobx\";\n\nimport { create } from \"mobx-persist\";\n\nimport { Game } from \"./Game\";\nimport { Router } from \"./Router\";\n\nclass Store {\n  private hydrate: any;\n\n  @observable public game: Game;\n  @observable public router: Router;\n\n  @observable public loaded: boolean = false;\n\n  constructor() {\n    // Check current version\n    const version = localStorage.getItem(\"REACT_APP_VERSION\");\n\n    if (version !== process.env.REACT_APP_VERSION) {\n      localStorage.removeItem(\"game\");\n      localStorage.removeItem(\"router\");\n\n      localStorage.setItem(\n        \"REACT_APP_VERSION\",\n        process.env.REACT_APP_VERSION || \"\"\n      );\n    }\n\n    this.hydrate = create({\n      storage: {\n        setItem: async (key: string, value: string) => {\n          await localStorage.setItem(key, value);\n        },\n        getItem: async (key: string) => {\n          return localStorage.getItem(key);\n        }\n      }\n    });\n\n    this.game = new Game();\n    this.router = new Router();\n\n    this.hydrateStores();\n  }\n\n  hydrateStores = async () => {\n    this.loaded = false;\n\n    await this.hydrate(\"game\", this.game);\n    await this.hydrate(\"router\", this.router);\n\n    this.loaded = true;\n  };\n}\n\nexport default new Store();\n","import React from \"react\";\nimport stores from \"../stores\";\n\nexport const storesContext = React.createContext(stores);\n","import React from \"react\";\nimport { storesContext } from \"../contexts\";\n\nexport const useStores = () => React.useContext(storesContext);\n","import React from \"react\";\nimport { Player } from \"../../../../stores/Game/Player\";\n\ninterface IProps {\n  colors: string[];\n  player: Player;\n  pickColor: Function;\n}\n\nexport const ColorPicker = ({ colors, player, pickColor }: IProps) => (\n  <>\n    {colors.map(color => (\n      <button\n        key={color}\n        className=\"btn btn-sm\"\n        type=\"button\"\n        onClick={() => pickColor(player.id, color)}\n        style={{\n          backgroundColor: color,\n          height: \"1.2rem\",\n          width: \"1.2rem\",\n          margin: \"0.125rem\",\n          border: `${\n            color === player.color ? \"1px\" : \"0\"\n          } solid rgba(0,0,0,0.5)`\n        }}\n      />\n    ))}\n  </>\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { useStores } from \"../../../../hooks/useStores\";\nimport { ColorPicker } from \"./ColorPicker\";\n\nexport const PlayerList = observer(() => {\n  const {\n    game: { players, colors, pickColor, removePlayer }\n  } = useStores();\n\n  return (\n    <div className=\"table-responsive-xl\">\n      <table className=\"table table-striped\">\n        <thead>\n          <tr>\n            <th scope=\"col\" colSpan={3}>\n              Spelers\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {players.length ? (\n            players.map(player => (\n              <tr key={player.id}>\n                <td style={{ color: player.color }}>{player.name}</td>\n                <td>\n                  <ColorPicker\n                    colors={colors}\n                    player={player}\n                    pickColor={pickColor}\n                  />\n                </td>\n                <td style={{ width: \"10%\" }}>\n                  <button\n                    className=\"btn btn-sm btn-danger\"\n                    type=\"button\"\n                    onClick={() => removePlayer(player.id)}\n                  >\n                    Verwijderen\n                  </button>\n                </td>\n              </tr>\n            ))\n          ) : (\n            <tr>\n              <td>Nog geen spelers toegevoegd.</td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n    </div>\n  );\n});\n","import React, { useState } from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { useStores } from \"../../../hooks/useStores\";\n\nexport const NewPlayer = observer(() => {\n  const {\n    game: { addPlayer }\n  } = useStores();\n  const [name, setName] = useState(\"\");\n\n  const savePlayer = () => {\n    addPlayer(name);\n    setName(\"\");\n  };\n\n  return (\n    <div className=\"row\">\n      <div className=\"col-sm\">\n        <div className=\"input-group mb-3\">\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Naam\"\n            value={name}\n            onChange={e => setName(e.target.value)}\n          />\n          <div className=\"input-group-append\">\n            <button\n              className=\"btn btn-primary\"\n              type=\"button\"\n              onClick={savePlayer}\n            >\n              Toevoegen\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n});\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { useStores } from \"../../../hooks/useStores\";\n\nexport const GameOptions = observer(() => {\n  const {\n    game: {\n      fullyRandom,\n      toggleFullyRandom,\n      minTricks,\n      setMinTricks,\n      maxTricks,\n      setMaxTricks,\n      amountOfRounds,\n      setAmountOfRounds,\n      loopTricksBack,\n      toggleLoopTricksBack,\n      shuffleTricks,\n      toggleShuffleTricks\n    }\n  } = useStores();\n\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"col\">\n          <input\n            name=\"Random slagen\"\n            type=\"checkbox\"\n            checked={fullyRandom}\n            onChange={toggleFullyRandom}\n          />\n          <label style={{ marginLeft: \"0.5rem\" }}>Volledig random slagen</label>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <div className=\"form-group\">\n            <label htmlFor=\"minTricks\">Minimaal aantal slagen</label>\n            <input\n              type=\"number\"\n              className=\"form-control\"\n              id=\"minTricks\"\n              value={minTricks}\n              onChange={e => setMinTricks(parseInt(e.target.value, 10))}\n            />\n          </div>\n        </div>\n        <div className=\"col\">\n          <div className=\"form-group\">\n            <label htmlFor=\"maxTricks\">Maximaal aantal slagen</label>\n            <input\n              type=\"number\"\n              className=\"form-control\"\n              id=\"maxTricks\"\n              value={maxTricks}\n              onChange={e => setMaxTricks(parseInt(e.target.value, 10))}\n            />\n          </div>\n        </div>\n        {fullyRandom && (\n          <div className=\"col\">\n            <div className=\"form-group\">\n              <label htmlFor=\"amountOfRounds\">Aantal rondes</label>\n              <input\n                type=\"number\"\n                className=\"form-control\"\n                id=\"amountOfRounds\"\n                value={amountOfRounds}\n                onChange={e => setAmountOfRounds(parseInt(e.target.value, 10))}\n              />\n            </div>\n          </div>\n        )}\n      </div>\n      {!fullyRandom && (\n        <>\n          <div className=\"row\">\n            <div className=\"col\">\n              <input\n                name=\"Slagen terugtellen\"\n                type=\"checkbox\"\n                checked={loopTricksBack}\n                onChange={toggleLoopTricksBack}\n              />\n              <label style={{ marginLeft: \"0.5rem\" }}>Slagen terugtellen</label>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col\">\n              <input\n                name=\"Random slagen\"\n                type=\"checkbox\"\n                checked={shuffleTricks}\n                onChange={toggleShuffleTricks}\n              />\n              <label style={{ marginLeft: \"0.5rem\" }}>\n                Random volgorde slagen\n              </label>\n            </div>\n          </div>\n        </>\n      )}\n    </>\n  );\n});\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { useStores } from \"../../../hooks/useStores\";\nimport { Route } from \"../../../stores/Router/Route\";\nimport { PlayerList } from \"./PlayerList\";\nimport { NewPlayer } from \"./NewPlayer\";\nimport { GameOptions } from \"./GameOptions\";\n\nexport const GameNew = observer(() => {\n  const {\n    game: { startGame },\n    router: { updateRoute }\n  } = useStores();\n\n  return (\n    <div className=\"card\" style={{ marginTop: \"1rem\" }}>\n      <h5 className=\"card-header\">Nieuw spel</h5>\n      <div className=\"card-body\">\n        <NewPlayer />\n        <PlayerList />\n        <GameOptions />\n        <div className=\"row\" style={{ marginTop: \"1rem\" }}>\n          <div className=\"col\">\n            <button\n              type=\"button\"\n              className=\"btn btn-primary btn-lg btn-block\"\n              onClick={startGame}\n            >\n              Beginnen\n            </button>\n          </div>\n        </div>\n        <button\n          style={{\n            width: \"10rem\",\n            position: \"fixed\",\n            bottom: \"1rem\",\n            left: \"1rem\"\n          }}\n          className=\"btn btn-danger btn-block\"\n          type=\"button\"\n          onClick={() => updateRoute(Route.Start)}\n        >\n          Terug\n        </button>\n      </div>\n    </div>\n  );\n});\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { Game } from \"../../../stores/Game\";\n\ninterface IProps {\n  game: Game;\n}\n\nexport const Scores = observer(({ game }: IProps) => {\n  const {\n    players,\n    currentRound: { scoreIndex, guessOrder, guessedTricks, amountOfTricks },\n    setScore\n  } = game;\n\n  const playerToSetScore = players.find(\n    player => player.id === guessOrder[scoreIndex]\n  );\n\n  const guessedTrick = guessedTricks.find(\n    guessedTrick => guessedTrick.playerId === guessOrder[scoreIndex]\n  );\n\n  if (!playerToSetScore || !guessedTrick) return null;\n\n  return (\n    <>\n      <div className=\"row\" style={{ margin: \"1rem 0\" }}>\n        <div className=\"col\">\n          Behaalde score voor: <b>{playerToSetScore.name}</b>. Verwachte slagen:{\" \"}\n          <b>{guessedTrick.amount}</b>\n        </div>\n      </div>\n      <div className=\"row\" style={{ margin: \"1rem 0\" }}>\n        <div className=\"col\">\n          <b>Behaalde slagen:</b>\n        </div>\n      </div>\n      <div className=\"row\" style={{ margin: \"1rem 0\" }}>\n        <div className=\"col-sm\">\n          <button\n            className=\"btn btn-success btn-lg btn-block\"\n            type=\"button\"\n            onClick={() => setScore(true, 0)}\n          >\n            Goed\n          </button>\n        </div>\n        <div className=\"col-sm\">\n          <div className=\"btn-group btn-block\" role=\"group\">\n            {[...Array(amountOfTricks + 1)].map((v, i) => {\n              if (guessedTrick.amount === i) return null;\n\n              return (\n                <button\n                  type=\"button\"\n                  className={`btn btn-lg btn-danger`}\n                  onClick={() => setScore(false, i)}\n                  key={i}\n                >\n                  {i}\n                </button>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n});\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { Game } from \"../../../stores/Game\";\n\ninterface IProps {\n  game: Game;\n}\n\nexport const ExpectedTricks = observer(({ game }: IProps) => {\n  const {\n    players,\n    currentRound: { guessIndex, guessOrder, amountOfTricks },\n    guessTricks,\n    totalTricks,\n    lastGuess\n  } = game;\n\n  const playerToGuess = players.find(\n    player => player.id === guessOrder[guessIndex]\n  );\n\n  if (!playerToGuess) return null;\n\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"col-sm\">\n          <p className=\"text-left\">\n            Verwachte slagen voor <b>{playerToGuess.name}</b>\n          </p>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-sm\">\n          <div className=\"input-group mb-3\">\n            <div className=\"btn-group btn-block\" role=\"group\">\n              {[...Array(amountOfTricks + 1)].map((v, i) => {\n                if (lastGuess && totalTricks + i === amountOfTricks)\n                  return null;\n                return (\n                  <button\n                    type=\"button\"\n                    className={`btn btn-lg btn-success`}\n                    onClick={() => guessTricks(i)}\n                    key={i}\n                  >\n                    {i}\n                  </button>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n});\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { Step } from \"../../../stores/Game/Round/Step\";\nimport { Game } from \"../../../stores/Game\";\nimport { Scores } from \"./Scores\";\nimport { ExpectedTricks } from \"./ExpectedTricks\";\n\ninterface IProps {\n  game: Game;\n}\n\nexport const RoundStep = observer(({ game }: IProps) => {\n  const {\n    currentRound: { step },\n    setScores,\n    nextRound\n  } = game;\n\n  switch (step) {\n    case Step.Guess:\n      return <ExpectedTricks game={game} />;\n    case Step.Play:\n      return (\n        <button\n          className=\"btn btn-primary btn-block\"\n          type=\"button\"\n          onClick={setScores}\n          style={{ margin: \"1rem 0\" }}\n        >\n          Scores invoeren\n        </button>\n      );\n    case Step.Score:\n      return <Scores game={game} />;\n    case Step.End:\n      return (\n        <button\n          className=\"btn btn-primary btn-block\"\n          type=\"button\"\n          onClick={() => nextRound()}\n          style={{ margin: \"1rem 0\" }}\n        >\n          Volgende ronde\n        </button>\n      );\n  }\n});\n","import React, { Fragment } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer\n} from \"recharts\";\n\nimport { Round } from \"../stores/Game/Round\";\nimport { Player } from \"../stores/Game/Player\";\n\ninterface IProps {\n  players: Player[];\n  rounds: Round[];\n  reverse: boolean;\n}\n\nexport const ScoreBoard = observer(({ players, rounds, reverse }: IProps) => {\n  const data = rounds.map(round => {\n    let row = { round: round.roundNumber };\n    round.scores.forEach(score => {\n      const player = players.find(player => player.id === score.playerId);\n\n      if (!player) return;\n\n      row = { ...row, [player.name]: score.totalScore };\n    });\n\n    return row;\n  });\n\n  return (\n    <div className=\"table-responsive-xl\">\n      <table className=\"table table-striped\">\n        <thead>\n          <tr>\n            <th scope=\"col\">Ronde</th>\n            <th scope=\"col\">Slagen</th>\n            {players.map(player => (\n              <Fragment key={player.id}>\n                <th scope=\"col\">{player.name}</th>\n                <th scope=\"col\">Verwacht</th>\n              </Fragment>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          <RoundRows rounds={rounds} players={players} reverse={reverse} />\n          <TotalRow rounds={rounds} players={players} />\n        </tbody>\n      </table>\n      <ResponsiveContainer width=\"95%\" height={400}>\n        <LineChart\n          data={data}\n          margin={{\n            top: 5,\n            right: 30,\n            left: 20,\n            bottom: 5\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"round\" />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          {players.map(player => (\n            <Line key={player.id} dataKey={player.name} stroke={player.color} />\n          ))}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n});\n\nconst RoundRows = observer(({ players, rounds, reverse }: IProps) => {\n  return (\n    <>\n      {(reverse ? [...rounds].reverse() : rounds).map(round => {\n        return (\n          <RoundRow round={round} players={players} key={round.roundNumber} />\n        );\n      })}\n    </>\n  );\n});\n\ninterface RoundRowProps {\n  round: Round;\n  players: Player[];\n}\n\nconst RoundRow = observer(({ round, players }: RoundRowProps) => {\n  const tdStyle = { padding: \"0.25rem 0.75rem\" };\n\n  return (\n    <tr key={round.roundNumber}>\n      <td style={tdStyle}>{round.roundNumber}</td>\n      <td style={tdStyle}>{round.amountOfTricks}</td>\n      {players.map(player => {\n        const guessedTrick = round.guessedTricks.find(\n          guessedTrick => guessedTrick.playerId === player.id\n        );\n\n        if (!round.scores.length || round.scores.length !== players.length) {\n          return (\n            <Fragment key={player.id}>\n              <td style={tdStyle}>-</td>\n              <td style={tdStyle}>\n                {guessedTrick ? guessedTrick.amount : \"-\"}\n              </td>\n            </Fragment>\n          );\n        }\n\n        const score = round.scores.find(score => score.playerId === player.id);\n\n        return (\n          <Fragment key={player.id}>\n            <td style={tdStyle}>{score?.totalScore}</td>\n            <td\n              style={{\n                ...tdStyle,\n                ...(score && score.score < 0 ? { color: \"red\" } : {})\n              }}\n            >\n              {guessedTrick?.amount}\n            </td>\n          </Fragment>\n        );\n      })}\n    </tr>\n  );\n});\n\ninterface TotalRowProps {\n  rounds: Round[];\n  players: Player[];\n}\n\nconst TotalRow = observer(({ rounds, players }: TotalRowProps) => {\n  const totals = new Map();\n\n  rounds.forEach(round => {\n    round.scores.forEach(score => {\n      if (totals.has(score.playerId)) {\n        totals.set(score.playerId, totals.get(score.playerId) + score.score);\n      } else {\n        totals.set(score.playerId, score.score);\n      }\n    });\n  });\n\n  return (\n    <tr>\n      <th colSpan={2}>Totaal</th>\n      {players.map(player => {\n        const score = totals.get(player.id);\n\n        return (\n          <td key={player.id} colSpan={2} className=\"twee\">\n            {score ? score : \"-\"}\n          </td>\n        );\n      })}\n    </tr>\n  );\n});\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { useStores } from \"../../../hooks/useStores\";\nimport { RoundStep } from \"./RoundStep\";\nimport { ScoreBoard } from \"../../ScoreBoard\";\n\nexport const GameRound = observer(() => {\n  const {\n    game,\n    game: {\n      roundNumber,\n      players,\n      roundHistory,\n      resetRound,\n      currentRound: { guessOrder, amountOfTricks },\n      resetGame\n    }\n  } = useStores();\n\n  const playerToShuffle = players.find(\n    player => player.id === guessOrder[players.length - 1]\n  );\n\n  const reset = () => {\n    const confirmed: boolean = window.confirm(\"Herstarten?\");\n\n    if (confirmed) {\n      resetGame();\n    }\n  };\n\n  if (!playerToShuffle) return null;\n\n  return (\n    <div className=\"card\" style={{ marginTop: \"1rem\" }}>\n      <h5 className=\"card-header\">\n        Ronde {roundNumber} - Aantal slagen <b>{amountOfTricks}</b>\n      </h5>\n      <div className=\"card-body\">\n        <div className=\"row\">\n          <div className=\"col\">\n            <b>{playerToShuffle.name}</b> moet deze ronde schudden\n          </div>\n        </div>\n        <hr />\n        <RoundStep game={game} />\n        <div className=\"row\">\n          <div className=\"col\">\n            <ScoreBoard\n              rounds={roundHistory}\n              players={players}\n              reverse={true}\n            />\n          </div>\n        </div>\n        <hr />\n        <div className=\"row\">\n          <div className=\"col\">\n            <button\n              className=\"btn btn-danger btn-block\"\n              type=\"button\"\n              onClick={resetRound}\n            >\n              Herstart ronde\n            </button>\n          </div>\n        </div>\n        <button\n          style={{\n            width: \"10rem\",\n            position: \"fixed\",\n            bottom: \"1rem\",\n            left: \"1rem\"\n          }}\n          className=\"btn btn-danger btn-block\"\n          type=\"button\"\n          onClick={reset}\n        >\n          Stoppen\n        </button>\n      </div>\n    </div>\n  );\n});\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { useStores } from \"../../hooks/useStores\";\nimport { ScoreBoard } from \"../ScoreBoard\";\n\nexport const GameFinished = observer(() => {\n  const {\n    game: { players, roundHistory, resetGame }\n  } = useStores();\n\n  return (\n    <div className=\"card\" style={{ marginTop: \"1rem\" }}>\n      <h5 className=\"card-header\">Klaar!</h5>\n      <div className=\"card-body\">\n        <ScoreBoard players={players} rounds={roundHistory} reverse={false} />\n        <div className=\"row\">\n          <div className=\"col\">\n            <button\n              className=\"btn btn-success btn-block\"\n              type=\"button\"\n              onClick={resetGame}\n            >\n              Nieuw spel\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n});\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { useStores } from \"../../hooks/useStores\";\nimport { Route } from \"../../stores/Router/Route\";\n\nexport const GameStart = observer(() => {\n  const {\n    router: { updateRoute }\n  } = useStores();\n\n  return (\n    <div className=\"card\" style={{ marginTop: \"1rem\" }}>\n      <h5 className=\"card-header\">Boeren Bridge</h5>\n      <div className=\"card-body\">\n        <div className=\"row\">\n          <div className=\"col\">\n            <button\n              className=\"btn btn-success btn-block\"\n              type=\"button\"\n              onClick={() => updateRoute(Route.New)}\n            >\n              Nieuw spel\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n});\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { useStores } from \"../hooks/useStores\";\nimport { GameNew } from \"./pages/GameNew\";\nimport { GameRound } from \"./pages/GameRound\";\nimport { GameFinished } from \"./pages/GameFinished\";\nimport { Route } from \"../stores/Router/Route\";\nimport { GameStart } from \"./pages/GameStart\";\n\nconst App: React.FC = observer(() => {\n  const {\n    loaded,\n    router: { route }\n  } = useStores();\n\n  let page;\n\n  if (!loaded) {\n    return null;\n  }\n\n  switch (route) {\n    case Route.Start:\n      page = <GameStart />;\n      break;\n    case Route.New:\n      page = <GameNew />;\n      break;\n    case Route.Round:\n      page = <GameRound />;\n      break;\n    case Route.Finished:\n      page = <GameFinished />;\n      break;\n  }\n\n  return <div className=\"container\">{page}</div>;\n});\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"./styles/theme.scss\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}