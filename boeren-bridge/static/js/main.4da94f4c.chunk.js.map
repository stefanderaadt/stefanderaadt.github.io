{"version":3,"sources":["stores/Game/Round/Step.ts","stores/Game/Player.ts","stores/Game/Round/index.ts","stores/Router/Route.ts","utils/shuffle.ts","utils/random.ts","stores/Game/index.ts","stores/Router/index.ts","stores/index.ts","contexts/index.tsx","hooks/useStores.tsx","components/pages/GameNew.tsx","components/pages/GameRound/Scores.tsx","components/pages/GameRound/ExpectedTricks.tsx","components/pages/GameRound/RoundStep.tsx","components/ScoreBoard.tsx","components/pages/GameRound/index.tsx","components/pages/GameFinished.tsx","components/pages/GameStart.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["Step","Player","name","color","this","id","uuidV1","observable","Route","Round","persist","roundNumber","guessOrder","amountOfTricks","Guess","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","min","max","attack","Audio","process","yeah","Game","currentRound","guessedTricks","reduce","accumulator","guessedTrick","amount","guessIndex","roundHistory","action","tricks","maxTricks","minTricks","rounds","amountOfRounds","player","colors","players","push","playerOrder","idx","findIndex","filter","orderId","loopTricksBack","shuffleTricks","fullyRandom","roundTricks","store","router","updateRoute","New","i","firstToShuffle","nextRound","increment","play","Finished","shuffleOffset","pointer","round","pop","lastGuess","totalTricks","playerId","step","Play","correct","calcTricks","scoreIndex","abs","score","totalScore","lastRound","lastScore","scores","find","End","Score","computed","soundtrack","loop","Router","Start","route","pause","hydrate","hydrateStores","a","async","loaded","game","create","storage","setItem","key","value","localStorage","getItem","storesContext","React","createContext","stores","useStores","useContext","GameNew","observer","setMinTricks","setMaxTricks","setAmountOfRounds","addPlayer","pickColor","removePlayer","startGame","toggleShuffleTricks","toggleLoopTricksBack","toggleFullyRandom","useState","setName","className","style","marginTop","type","placeholder","onChange","e","target","onClick","scope","colSpan","map","backgroundColor","height","width","margin","border","checked","marginLeft","htmlFor","parseInt","position","bottom","left","Scores","setScore","playerToSetScore","role","Array","v","ExpectedTricks","guessTricks","playerToGuess","RoundStep","setScores","ScoreBoard","reverse","data","row","forEach","RoundRows","TotalRow","top","right","strokeDasharray","dataKey","stroke","RoundRow","tdStyle","padding","totals","Map","has","set","get","GameRound","resetRound","resetGame","playerToShuffle","window","confirm","GameFinished","GameStart","App","page","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4da94f4c.chunk.js","sourcesContent":["export enum Step {\n  Guess,\n  Play,\n  Score,\n  End\n}\n","import { observable } from \"mobx\";\nimport { v1 as uuidV1 } from \"uuid\";\n\nexport class Player {\n  @observable id: string;\n  @observable name: string;\n  @observable color: string;\n\n  constructor(name: string, color: string) {\n    this.name = name;\n    this.id = uuidV1();\n    this.color = color;\n  }\n}\n","import { observable } from \"mobx\";\n\nimport { GuessedTricks } from \"./GuessedTricks\";\nimport { Score } from \"./Score\";\nimport { Step } from \"./Step\";\nimport { persist } from \"mobx-persist\";\n\nexport class Round {\n  @observable @persist roundNumber: number;\n  @observable @persist(\"list\") guessOrder: string[];\n  @observable @persist amountOfTricks: number;\n\n  @observable @persist step: Step = Step.Guess;\n\n  @observable @persist guessIndex: number = 0;\n  @observable @persist(\"list\") guessedTricks: GuessedTricks[] = [];\n\n  @observable @persist scoreIndex: number = 0;\n  @observable @persist scores: Score[] = [];\n\n  constructor(\n    roundNumber: number,\n    guessOrder: string[],\n    amountOfTricks: number\n  ) {\n    this.roundNumber = roundNumber;\n    this.guessOrder = guessOrder;\n    this.amountOfTricks = amountOfTricks;\n  }\n}\n","export enum Route {\n  Start,\n  New,\n  Round,\n  Finished\n}\n","const shuffle = (array: any[]) => {\n  let currentIndex = array.length,\n    temporaryValue,\n    randomIndex;\n\n  while (0 !== currentIndex) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n};\n\nexport default shuffle;\n","const random = (min: number, max: number) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nexport default random;\n","import { observable, action, computed } from \"mobx\";\n\nimport store from \"../index\";\n\nimport { Player } from \"./Player\";\nimport { Round } from \"./Round\";\n\nimport shuffle from \"../../utils/shuffle\";\nimport { Step } from \"./Round/Step\";\nimport { persist } from \"mobx-persist\";\nimport { Route } from \"../Router/Route\";\nimport random from \"../../utils/random\";\n\nconst attack = new Audio(`${process.env.PUBLIC_URL}/audio/attack.mp3`);\n\nconst yeah = new Audio(`${process.env.PUBLIC_URL}/audio/yeah.mp3`);\n\nexport class Game {\n  @observable @persist roundNumber: number = 0;\n  @observable @persist(\"list\") roundHistory: Round[] = [];\n  @observable @persist minTricks: number = 1;\n  @observable @persist maxTricks: number = 10;\n  @observable @persist amountOfRounds: number = 20;\n  @observable @persist(\"list\") players: Player[] = [];\n  @observable @persist(\"list\") playerOrder: string[] = [];\n  @observable @persist(\"list\") roundTricks: number[] = [];\n  @observable @persist loopTricksBack: boolean = true;\n  @observable @persist shuffleTricks: boolean = false;\n  @observable @persist fullyRandom: boolean = false;\n  @observable @persist firstToShuffle: number;\n  @observable @persist(\"list\") colors: string[] = [\n    \"#007bff\",\n    \"#6610f2\",\n    \"#6f42c1\",\n    \"#e83e8c\",\n    \"#dc3545\",\n    \"#fd7e14\",\n    \"#ffc107\",\n    \"#28a745\",\n    \"#20c997\",\n    \"#17a2b8\"\n  ];\n\n  @action\n  setMinTricks = (tricks: number): void => {\n    if (tricks < 1 || tricks > this.maxTricks) return;\n\n    this.minTricks = tricks;\n  };\n\n  @action\n  setMaxTricks = (tricks: number): void => {\n    if (tricks < this.minTricks) return;\n\n    this.maxTricks = tricks;\n  };\n\n  @action setAmountOfRounds = (rounds: number): void => {\n    if (rounds < 1) return;\n\n    this.amountOfRounds = rounds;\n  };\n\n  @action\n  addPlayer = (name: string): void => {\n    const player = new Player(\n      name,\n      this.colors[random(0, this.colors.length - 1)]\n    );\n    this.players.push(player);\n    this.playerOrder.push(player.id);\n  };\n\n  @action\n  pickColor = (id: string, color: string): void => {\n    const idx = this.players.findIndex(player => player.id === id);\n    this.players[idx].color = color;\n  };\n\n  @action\n  removePlayer = (id: string): void => {\n    this.players = this.players.filter(player => player.id !== id);\n    this.playerOrder = this.playerOrder.filter(orderId => orderId !== id);\n  };\n\n  @action\n  toggleLoopTricksBack = (): void => {\n    this.loopTricksBack = !this.loopTricksBack;\n  };\n\n  @action\n  toggleShuffleTricks = (): void => {\n    this.shuffleTricks = !this.shuffleTricks;\n  };\n\n  @action\n  toggleFullyRandom = (): void => {\n    this.fullyRandom = !this.fullyRandom;\n  };\n\n  @action\n  resetGame = (): void => {\n    this.roundNumber = 0;\n    this.roundHistory = [];\n    this.minTricks = 1;\n    this.maxTricks = 10;\n    this.players = [];\n    this.playerOrder = [];\n    this.roundTricks = [];\n    this.loopTricksBack = true;\n    this.shuffleTricks = false;\n    this.fullyRandom = false;\n\n    store.router.updateRoute(Route.New);\n  };\n\n  @action\n  startGame = (): void => {\n    if (this.players.length < 2) return;\n\n    if (this.fullyRandom) {\n      for (let i = 0; i < this.amountOfRounds; i += 1) {\n        this.roundTricks.push(random(this.minTricks, this.maxTricks));\n      }\n    } else {\n      for (let i = this.minTricks; i <= this.maxTricks; i += 1) {\n        this.roundTricks.push(i);\n      }\n\n      if (this.loopTricksBack) {\n        for (let i = this.maxTricks; i >= this.minTricks; i -= 1) {\n          this.roundTricks.push(i);\n        }\n      }\n\n      if (this.shuffleTricks) {\n        this.roundTricks = shuffle(this.roundTricks);\n      }\n    }\n\n    this.firstToShuffle = random(0, this.players.length - 1);\n    this.nextRound();\n    store.router.updateRoute(Route.Round);\n  };\n\n  @action\n  nextRound = (increment: boolean = true): void => {\n    if (this.roundNumber >= this.roundTricks.length) {\n      yeah.play();\n      store.router.updateRoute(Route.Finished);\n      return;\n    }\n\n    if (increment) this.roundNumber += 1;\n\n    const shuffleOffset: number =\n      (this.roundNumber + this.firstToShuffle) % this.players.length;\n    const guessOrder: string[] = [];\n\n    for (let i = 0; i < this.playerOrder.length; i += 1) {\n      const pointer = (i + shuffleOffset) % this.playerOrder.length;\n      guessOrder.push(this.playerOrder[pointer]);\n    }\n\n    const round = new Round(\n      this.roundNumber,\n      guessOrder,\n      this.roundTricks[this.roundNumber - 1]\n    );\n\n    this.roundHistory.push(round);\n  };\n\n  @action\n  resetRound = (): void => {\n    this.roundHistory.pop();\n    this.nextRound(false);\n  };\n\n  @action\n  guessTricks = (amount: number) => {\n    if (\n      amount == null ||\n      amount < 0 ||\n      amount > this.currentRound.amountOfTricks\n    ) {\n      return;\n    }\n\n    // The tricks can't exactly be the totalTricks\n    if (this.lastGuess) {\n      // last guess of round\n      if (this.totalTricks + amount === this.currentRound.amountOfTricks) {\n        return;\n      }\n    }\n\n    this.currentRound.guessedTricks.push({\n      playerId: this.currentRound.guessOrder[this.currentRound.guessIndex],\n      amount\n    });\n\n    this.currentRound.guessIndex++;\n\n    if (this.currentRound.guessIndex === this.currentRound.guessOrder.length) {\n      attack.play();\n      this.currentRound.step = Step.Play;\n    }\n  };\n\n  @action\n  setScore = (correct: boolean, tricks: number) => {\n    let calcTricks;\n\n    const guessedTricks = this.currentRound.guessedTricks[\n      this.currentRound.scoreIndex\n    ].amount;\n    const playerId = this.currentRound.guessOrder[this.currentRound.scoreIndex];\n\n    if (correct) {\n      calcTricks = guessedTricks;\n    } else {\n      if (tricks == null) return;\n      calcTricks = Math.abs(guessedTricks - tricks);\n    }\n\n    const score = correct ? 10 + calcTricks * 2 : calcTricks * 2 * -1;\n    let totalScore: number = score;\n\n    if (this.lastRound) {\n      const lastScore = this.lastRound.scores.find(\n        score => score.playerId === playerId\n      );\n\n      totalScore += lastScore?.totalScore || 0;\n    }\n\n    this.currentRound.scores.push({\n      playerId,\n      score,\n      totalScore\n    });\n\n    this.currentRound.scoreIndex++;\n\n    if (this.currentRound.scoreIndex >= this.currentRound.guessOrder.length) {\n      this.currentRound.step = Step.End;\n    }\n  };\n\n  @action\n  setScores = () => {\n    this.currentRound.step = Step.Score;\n  };\n\n  @computed\n  get totalTricks(): number {\n    return this.currentRound.guessedTricks.reduce(\n      (accumulator, guessedTrick) => accumulator + guessedTrick.amount,\n      0\n    );\n  }\n\n  @computed\n  get lastGuess(): boolean {\n    return (\n      this.currentRound.guessIndex === this.currentRound.guessOrder.length - 1\n    );\n  }\n\n  @computed get currentRound(): Round {\n    return this.roundHistory[this.roundHistory.length - 1];\n  }\n\n  @computed get lastRound(): Round | null {\n    if (this.roundHistory?.length < 2) return null;\n\n    return this.roundHistory[this.roundHistory.length - 2];\n  }\n}\n","import { observable, action } from \"mobx\";\nimport { persist } from \"mobx-persist\";\n\nimport { Route } from \"./Route\";\n\nconst soundtrack = new Audio(`${process.env.PUBLIC_URL}/audio/soundtrack.mp3`);\nsoundtrack.loop = true;\n\nexport class Router {\n  @observable @persist route: Route = Route.Start;\n\n  @action\n  updateRoute = (route: Route) => {\n    if (route === Route.New) {\n      soundtrack.play();\n    } else {\n      soundtrack.pause();\n    }\n\n    this.route = route;\n  };\n}\n","import { observable } from \"mobx\";\n\nimport { create } from \"mobx-persist\";\n\nimport { Game } from \"./Game\";\nimport { Router } from \"./Router\";\n\nclass Store {\n  private hydrate: any;\n\n  @observable public game: Game;\n  @observable public router: Router;\n\n  @observable public loaded: boolean = false;\n\n  constructor() {\n    this.hydrate = create({\n      storage: {\n        setItem: async (key: string, value: string) => {\n          await localStorage.setItem(key, value);\n        },\n        getItem: async (key: string) => {\n          return localStorage.getItem(key);\n        }\n      }\n    });\n\n    this.game = new Game();\n    this.router = new Router();\n\n    this.hydrateStores();\n  }\n\n  hydrateStores = async () => {\n    this.loaded = false;\n\n    await this.hydrate(\"game\", this.game);\n    await this.hydrate(\"router\", this.router);\n\n    this.loaded = true;\n  };\n}\n\nexport default new Store();\n","import React from \"react\";\nimport stores from \"../stores\";\n\nexport const storesContext = React.createContext(stores);\n","import React from \"react\";\nimport { storesContext } from \"../contexts\";\n\nexport const useStores = () => React.useContext(storesContext);\n","import React, { useState } from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { useStores } from \"../../hooks/useStores\";\nimport { Route } from \"../../stores/Router/Route\";\n\nexport const GameNew = observer(() => {\n  const {\n    game: {\n      minTricks,\n      setMinTricks,\n      maxTricks,\n      setMaxTricks,\n      amountOfRounds,\n      setAmountOfRounds,\n      players,\n      colors,\n      addPlayer,\n      pickColor,\n      removePlayer,\n      startGame,\n      shuffleTricks,\n      toggleShuffleTricks,\n      loopTricksBack,\n      toggleLoopTricksBack,\n      fullyRandom,\n      toggleFullyRandom\n    },\n    router: { updateRoute }\n  } = useStores();\n  const [name, setName] = useState(\"\");\n\n  const savePlayer = () => {\n    addPlayer(name);\n    setName(\"\");\n  };\n\n  return (\n    <div className=\"card\" style={{ marginTop: \"1rem\" }}>\n      <h5 className=\"card-header\">Nieuw spel</h5>\n      <div className=\"card-body\">\n        <div className=\"row\">\n          <div className=\"col-sm\">\n            <div className=\"input-group mb-3\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"Naam\"\n                value={name}\n                onChange={e => setName(e.target.value)}\n              />\n              <div className=\"input-group-append\">\n                <button\n                  className=\"btn btn-primary\"\n                  type=\"button\"\n                  onClick={savePlayer}\n                >\n                  Toevoegen\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"table-responsive-xl\">\n          <table className=\"table table-striped\">\n            <thead>\n              <tr>\n                <th scope=\"col\" colSpan={2}>\n                  Spelers\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              {players.length ? (\n                players.map(player => (\n                  <tr key={player.id}>\n                    <td style={{ color: player.color }}>{player.name}</td>\n                    <td>\n                      {colors.map(color => (\n                        <button\n                          key={color}\n                          className=\"btn btn-sm\"\n                          type=\"button\"\n                          onClick={() => pickColor(player.id, color)}\n                          style={{\n                            backgroundColor: color,\n                            height: \"1.2rem\",\n                            width: \"1.2rem\",\n                            margin: \"0.125rem\",\n                            border: `${\n                              color === player.color ? \"1px\" : \"0\"\n                            } solid rgba(0,0,0,0.5)`\n                          }}\n                        />\n                      ))}\n                    </td>\n                    <td style={{ width: \"10%\" }}>\n                      <button\n                        className=\"btn btn-sm btn-danger\"\n                        type=\"button\"\n                        onClick={() => removePlayer(player.id)}\n                      >\n                        Verwijderen\n                      </button>\n                    </td>\n                  </tr>\n                ))\n              ) : (\n                <tr>\n                  <td>Nog geen spelers toegevoegd.</td>\n                </tr>\n              )}\n            </tbody>\n          </table>\n        </div>\n        <div className=\"row\">\n          <div className=\"col\">\n            <input\n              name=\"Random slagen\"\n              type=\"checkbox\"\n              checked={fullyRandom}\n              onChange={toggleFullyRandom}\n            />\n            <label style={{ marginLeft: \"0.5rem\" }}>\n              Volledig random slagen\n            </label>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col\">\n            <div className=\"form-group\">\n              <label htmlFor=\"minTricks\">Minimaal aantal slagen</label>\n              <input\n                type=\"number\"\n                className=\"form-control\"\n                id=\"minTricks\"\n                value={minTricks}\n                onChange={e => setMinTricks(parseInt(e.target.value, 10))}\n              />\n            </div>\n          </div>\n          <div className=\"col\">\n            <div className=\"form-group\">\n              <label htmlFor=\"maxTricks\">Maximaal aantal slagen</label>\n              <input\n                type=\"number\"\n                className=\"form-control\"\n                id=\"maxTricks\"\n                value={maxTricks}\n                onChange={e => setMaxTricks(parseInt(e.target.value, 10))}\n              />\n            </div>\n          </div>\n          {fullyRandom && (\n            <div className=\"col\">\n              <div className=\"form-group\">\n                <label htmlFor=\"amountOfRounds\">Aantal rondes</label>\n                <input\n                  type=\"number\"\n                  className=\"form-control\"\n                  id=\"amountOfRounds\"\n                  value={amountOfRounds}\n                  onChange={e =>\n                    setAmountOfRounds(parseInt(e.target.value, 10))\n                  }\n                />\n              </div>\n            </div>\n          )}\n        </div>\n        {!fullyRandom && (\n          <>\n            <div className=\"row\">\n              <div className=\"col\">\n                <input\n                  name=\"Slagen terugtellen\"\n                  type=\"checkbox\"\n                  checked={loopTricksBack}\n                  onChange={toggleLoopTricksBack}\n                />\n                <label style={{ marginLeft: \"0.5rem\" }}>\n                  Slagen terugtellen\n                </label>\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"col\">\n                <input\n                  name=\"Random slagen\"\n                  type=\"checkbox\"\n                  checked={shuffleTricks}\n                  onChange={toggleShuffleTricks}\n                />\n                <label style={{ marginLeft: \"0.5rem\" }}>\n                  Random volgorde slagen\n                </label>\n              </div>\n            </div>\n          </>\n        )}\n        <div className=\"row\" style={{ marginTop: \"1rem\" }}>\n          <div className=\"col\">\n            <button\n              type=\"button\"\n              className=\"btn btn-primary btn-lg btn-block\"\n              onClick={startGame}\n            >\n              Beginnen\n            </button>\n          </div>\n        </div>\n\n        <button\n          style={{\n            width: \"10rem\",\n            position: \"fixed\",\n            bottom: \"1rem\",\n            left: \"1rem\"\n          }}\n          className=\"btn btn-danger btn-block\"\n          type=\"button\"\n          onClick={() => updateRoute(Route.Start)}\n        >\n          Terug\n        </button>\n      </div>\n    </div>\n  );\n});\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { Game } from \"../../../stores/Game\";\n\ninterface IProps {\n  game: Game;\n}\n\nexport const Scores = observer(({ game }: IProps) => {\n  const {\n    players,\n    currentRound: { scoreIndex, guessOrder, guessedTricks, amountOfTricks },\n    setScore\n  } = game;\n\n  const playerToSetScore = players.find(\n    player => player.id === guessOrder[scoreIndex]\n  );\n\n  const guessedTrick = guessedTricks.find(\n    guessedTrick => guessedTrick.playerId === guessOrder[scoreIndex]\n  );\n\n  if (!playerToSetScore || !guessedTrick) return null;\n\n  return (\n    <>\n      <div className=\"row\" style={{ margin: \"1rem 0\" }}>\n        <div className=\"col\">\n          Behaalde score voor: <b>{playerToSetScore.name}</b>. Verwachte slagen:{\" \"}\n          <b>{guessedTrick.amount}</b>\n        </div>\n      </div>\n      <div className=\"row\" style={{ margin: \"1rem 0\" }}>\n        <div className=\"col\">\n          <b>Behaalde slagen:</b>\n        </div>\n      </div>\n      <div className=\"row\" style={{ margin: \"1rem 0\" }}>\n        <div className=\"col-sm\">\n          <button\n            className=\"btn btn-success btn-lg btn-block\"\n            type=\"button\"\n            onClick={() => setScore(true, 0)}\n          >\n            Goed\n          </button>\n        </div>\n        <div className=\"col-sm\">\n          <div className=\"btn-group btn-block\" role=\"group\">\n            {[...Array(amountOfTricks + 1)].map((v, i) => {\n              if (guessedTrick.amount === i) return null;\n\n              return (\n                <button\n                  type=\"button\"\n                  className={`btn btn-lg btn-danger`}\n                  onClick={() => setScore(false, i)}\n                  key={i}\n                >\n                  {i}\n                </button>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n});\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { Game } from \"../../../stores/Game\";\n\ninterface IProps {\n  game: Game;\n}\n\nexport const ExpectedTricks = observer(({ game }: IProps) => {\n  const {\n    players,\n    currentRound: { guessIndex, guessOrder, amountOfTricks },\n    guessTricks,\n    totalTricks,\n    lastGuess\n  } = game;\n\n  const playerToGuess = players.find(\n    player => player.id === guessOrder[guessIndex]\n  );\n\n  if (!playerToGuess) return null;\n\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"col-sm\">\n          <p className=\"text-left\">\n            Verwachte slagen voor <b>{playerToGuess.name}</b>\n          </p>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-sm\">\n          <div className=\"input-group mb-3\">\n            <div className=\"btn-group btn-block\" role=\"group\">\n              {[...Array(amountOfTricks + 1)].map((v, i) => {\n                if (lastGuess && totalTricks + i === amountOfTricks)\n                  return null;\n                return (\n                  <button\n                    type=\"button\"\n                    className={`btn btn-lg btn-success`}\n                    onClick={() => guessTricks(i)}\n                    key={i}\n                  >\n                    {i}\n                  </button>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n});\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { Step } from \"../../../stores/Game/Round/Step\";\nimport { Game } from \"../../../stores/Game\";\nimport { Scores } from \"./Scores\";\nimport { ExpectedTricks } from \"./ExpectedTricks\";\n\ninterface IProps {\n  game: Game;\n}\n\nexport const RoundStep = observer(({ game }: IProps) => {\n  const {\n    currentRound: { step },\n    setScores,\n    nextRound\n  } = game;\n\n  switch (step) {\n    case Step.Guess:\n      return <ExpectedTricks game={game} />;\n    case Step.Play:\n      return (\n        <button\n          className=\"btn btn-primary btn-block\"\n          type=\"button\"\n          onClick={setScores}\n          style={{ margin: \"1rem 0\" }}\n        >\n          Scores invoeren\n        </button>\n      );\n    case Step.Score:\n      return <Scores game={game} />;\n    case Step.End:\n      return (\n        <button\n          className=\"btn btn-primary btn-block\"\n          type=\"button\"\n          onClick={() => nextRound()}\n          style={{ margin: \"1rem 0\" }}\n        >\n          Volgende ronde\n        </button>\n      );\n  }\n});\n","import React, { Fragment } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer\n} from \"recharts\";\n\nimport { Round } from \"../stores/Game/Round\";\nimport { Player } from \"../stores/Game/Player\";\n\ninterface IProps {\n  players: Player[];\n  rounds: Round[];\n  reverse: boolean;\n}\n\nexport const ScoreBoard = observer(({ players, rounds, reverse }: IProps) => {\n  const data = rounds.map(round => {\n    let row = { round: round.roundNumber };\n    round.scores.forEach(score => {\n      const player = players.find(player => player.id === score.playerId);\n\n      if (!player) return;\n\n      row = { ...row, [player.name]: score.totalScore };\n    });\n\n    return row;\n  });\n\n  return (\n    <div className=\"table-responsive-xl\">\n      <table className=\"table table-striped\">\n        <thead>\n          <tr>\n            <th scope=\"col\">Ronde</th>\n            <th scope=\"col\">Slagen</th>\n            {players.map(player => (\n              <Fragment key={player.id}>\n                <th scope=\"col\">{player.name}</th>\n                <th scope=\"col\">Verwacht</th>\n              </Fragment>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          <RoundRows rounds={rounds} players={players} reverse={reverse} />\n          <TotalRow rounds={rounds} players={players} />\n        </tbody>\n      </table>\n      <ResponsiveContainer width=\"95%\" height={400}>\n        <LineChart\n          data={data}\n          margin={{\n            top: 5,\n            right: 30,\n            left: 20,\n            bottom: 5\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"round\" />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          {players.map(player => (\n            <Line key={player.id} dataKey={player.name} stroke={player.color} />\n          ))}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n});\n\nconst RoundRows = observer(({ players, rounds, reverse }: IProps) => {\n  return (\n    <>\n      {(reverse ? [...rounds].reverse() : rounds).map(round => {\n        return (\n          <RoundRow round={round} players={players} key={round.roundNumber} />\n        );\n      })}\n    </>\n  );\n});\n\ninterface RoundRowProps {\n  round: Round;\n  players: Player[];\n}\n\nconst RoundRow = observer(({ round, players }: RoundRowProps) => {\n  const tdStyle = { padding: \"0.25rem 0.75rem\" };\n\n  return (\n    <tr key={round.roundNumber}>\n      <td style={tdStyle}>{round.roundNumber}</td>\n      <td style={tdStyle}>{round.amountOfTricks}</td>\n      {players.map(player => {\n        const guessedTrick = round.guessedTricks.find(\n          guessedTrick => guessedTrick.playerId === player.id\n        );\n\n        if (!round.scores.length || round.scores.length !== players.length) {\n          return (\n            <Fragment key={player.id}>\n              <td style={tdStyle}>-</td>\n              <td style={tdStyle}>\n                {guessedTrick ? guessedTrick.amount : \"-\"}\n              </td>\n            </Fragment>\n          );\n        }\n\n        const score = round.scores.find(score => score.playerId === player.id);\n\n        return (\n          <Fragment key={player.id}>\n            <td style={tdStyle}>{score?.totalScore}</td>\n            <td\n              style={{\n                ...tdStyle,\n                ...(score && score.score < 0 ? { color: \"red\" } : {})\n              }}\n            >\n              {guessedTrick?.amount}\n            </td>\n          </Fragment>\n        );\n      })}\n    </tr>\n  );\n});\n\ninterface TotalRowProps {\n  rounds: Round[];\n  players: Player[];\n}\n\nconst TotalRow = observer(({ rounds, players }: TotalRowProps) => {\n  const totals = new Map();\n\n  rounds.forEach(round => {\n    round.scores.forEach(score => {\n      if (totals.has(score.playerId)) {\n        totals.set(score.playerId, totals.get(score.playerId) + score.score);\n      } else {\n        totals.set(score.playerId, score.score);\n      }\n    });\n  });\n\n  return (\n    <tr>\n      <th colSpan={2}>Totaal</th>\n      {players.map(player => {\n        const score = totals.get(player.id);\n\n        return (\n          <td key={player.id} colSpan={2} className=\"twee\">\n            {score ? score : \"-\"}\n          </td>\n        );\n      })}\n    </tr>\n  );\n});\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { useStores } from \"../../../hooks/useStores\";\nimport { RoundStep } from \"./RoundStep\";\nimport { ScoreBoard } from \"../../ScoreBoard\";\n\nexport const GameRound = observer(() => {\n  const {\n    game,\n    game: {\n      roundNumber,\n      players,\n      roundHistory,\n      resetRound,\n      currentRound: { guessOrder, amountOfTricks },\n      resetGame\n    }\n  } = useStores();\n\n  const playerToShuffle = players.find(\n    player => player.id === guessOrder[players.length - 1]\n  );\n\n  const reset = () => {\n    const confirmed: boolean = window.confirm(\"Herstarten?\");\n\n    if (confirmed) {\n      resetGame();\n    }\n  };\n\n  if (!playerToShuffle) return null;\n\n  return (\n    <div className=\"card\" style={{ marginTop: \"1rem\" }}>\n      <h5 className=\"card-header\">\n        Ronde {roundNumber} - Aantal slagen <b>{amountOfTricks}</b>\n      </h5>\n      <div className=\"card-body\">\n        <div className=\"row\">\n          <div className=\"col\">\n            <b>{playerToShuffle.name}</b> moet deze ronde schudden\n          </div>\n        </div>\n        <hr />\n        <RoundStep game={game} />\n        <div className=\"row\">\n          <div className=\"col\">\n            <ScoreBoard\n              rounds={roundHistory}\n              players={players}\n              reverse={true}\n            />\n          </div>\n        </div>\n        <hr />\n        <div className=\"row\">\n          <div className=\"col\">\n            <button\n              className=\"btn btn-danger btn-block\"\n              type=\"button\"\n              onClick={resetRound}\n            >\n              Herstart ronde\n            </button>\n          </div>\n        </div>\n        <button\n          style={{\n            width: \"10rem\",\n            position: \"fixed\",\n            bottom: \"1rem\",\n            left: \"1rem\"\n          }}\n          className=\"btn btn-danger btn-block\"\n          type=\"button\"\n          onClick={reset}\n        >\n          Stoppen\n        </button>\n      </div>\n    </div>\n  );\n});\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { useStores } from \"../../hooks/useStores\";\nimport { ScoreBoard } from \"../ScoreBoard\";\n\nexport const GameFinished = observer(() => {\n  const {\n    game: { players, roundHistory, resetGame }\n  } = useStores();\n\n  return (\n    <div className=\"card\" style={{ marginTop: \"1rem\" }}>\n      <h5 className=\"card-header\">Klaar!</h5>\n      <div className=\"card-body\">\n        <ScoreBoard players={players} rounds={roundHistory} reverse={false} />\n        <div className=\"row\">\n          <div className=\"col\">\n            <button\n              className=\"btn btn-success btn-block\"\n              type=\"button\"\n              onClick={resetGame}\n            >\n              Nieuw spel\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n});\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { useStores } from \"../../hooks/useStores\";\nimport { Route } from \"../../stores/Router/Route\";\n\nexport const GameStart = observer(() => {\n  const {\n    router: { updateRoute }\n  } = useStores();\n\n  return (\n    <div className=\"card\" style={{ marginTop: \"1rem\" }}>\n      <h5 className=\"card-header\">Boeren Bridge</h5>\n      <div className=\"card-body\">\n        <div className=\"row\">\n          <div className=\"col\">\n            <button\n              className=\"btn btn-success btn-block\"\n              type=\"button\"\n              onClick={() => updateRoute(Route.New)}\n            >\n              Nieuw spel\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n});\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { useStores } from \"../hooks/useStores\";\nimport { GameNew } from \"./pages/GameNew\";\nimport { GameRound } from \"./pages/GameRound\";\nimport { GameFinished } from \"./pages/GameFinished\";\nimport { Route } from \"../stores/Router/Route\";\nimport { GameStart } from \"./pages/GameStart\";\n\nconst App: React.FC = observer(() => {\n  const {\n    loaded,\n    router: { route }\n  } = useStores();\n\n  let page;\n\n  if (!loaded) {\n    return null;\n  }\n\n  switch (route) {\n    case Route.Start:\n      page = <GameStart />;\n      break;\n    case Route.New:\n      page = <GameNew />;\n      break;\n    case Route.Round:\n      page = <GameRound />;\n      break;\n    case Route.Finished:\n      page = <GameFinished />;\n      break;\n  }\n\n  return <div className=\"container\">{page}</div>;\n});\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"./styles/theme.scss\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}