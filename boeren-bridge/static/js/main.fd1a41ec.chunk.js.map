{"version":3,"sources":["stores/Game/Round/Step.ts","stores/Game/Player.ts","stores/Game/Round/index.ts","stores/Router/Route.ts","utils/shuffle.ts","stores/Game/index.ts","stores/Router/index.ts","stores/index.ts","contexts/index.tsx","hooks/useStores.tsx","components/pages/GameNew.tsx","components/pages/GameRound/Scores.tsx","components/pages/GameRound/ExpectedTricks.tsx","components/pages/GameRound/RoundStep.tsx","components/ScoreBoard.tsx","components/pages/GameRound/index.tsx","components/pages/GameFinished.tsx","components/pages/GameStart.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["Step","Player","name","this","id","uuidV1","observable","Route","Round","persist","roundNumber","guessOrder","amountOfTricks","Guess","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","attack","Audio","process","yeah","Game","roundHistory","currentRound","guessedTricks","reduce","accumulator","guessedTrick","amount","guessIndex","action","tricks","maxTricks","minTricks","player","players","push","playerOrder","filter","orderId","loopTricksBack","shuffleTricks","roundTricks","store","router","updateRoute","New","i","nextRound","increment","play","Finished","shuffleOffset","pointer","round","pop","computed","lastGuess","totalTricks","playerId","step","Play","correct","calcTricks","scoreIndex","abs","scores","score","End","Score","soundtrack","loop","Router","Start","route","pause","hydrate","hydrateStores","a","async","loaded","game","create","storage","setItem","key","value","localStorage","getItem","storesContext","React","createContext","stores","useStores","useContext","GameNew","observer","setMinTricks","setMaxTricks","addPlayer","removePlayer","startGame","toggleShuffleTricks","toggleLoopTricksBack","useState","setName","className","style","marginTop","type","placeholder","onChange","e","target","onClick","scope","colSpan","map","width","htmlFor","parseInt","checked","marginLeft","position","bottom","left","Scores","setScore","playerToSetScore","find","margin","role","Array","v","ExpectedTricks","guessTricks","playerToGuess","RoundStep","setScores","ScoreBoard","rounds","reverse","RoundRows","TotalRow","RoundRow","tdStyle","padding","color","totals","Map","forEach","has","set","get","GameRound","resetRound","resetGame","playerToShuffle","window","confirm","GameFinished","GameStart","App","page","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fd1a41ec.chunk.js","sourcesContent":["export enum Step {\n  Guess,\n  Play,\n  Score,\n  End\n}\n","import { observable } from \"mobx\";\nimport { v1 as uuidV1 } from \"uuid\";\n\nexport class Player {\n  @observable id: string;\n  @observable name: string;\n\n  constructor(name: string) {\n    this.name = name;\n    this.id = uuidV1();\n  }\n}\n","import { observable } from \"mobx\";\n\nimport { GuessedTricks } from \"./GuessedTricks\";\nimport { Score } from \"./Score\";\nimport { Step } from \"./Step\";\nimport { persist } from \"mobx-persist\";\n\nexport class Round {\n  @observable @persist roundNumber: number;\n  @observable @persist(\"list\") guessOrder: string[];\n  @observable @persist amountOfTricks: number;\n\n  @observable @persist step: Step = Step.Guess;\n\n  @observable @persist guessIndex: number = 0;\n  @observable @persist(\"list\") guessedTricks: GuessedTricks[] = [];\n\n  @observable @persist scoreIndex: number = 0;\n  @observable @persist scores: Score[] = [];\n\n  constructor(\n    roundNumber: number,\n    guessOrder: string[],\n    amountOfTricks: number\n  ) {\n    this.roundNumber = roundNumber;\n    this.guessOrder = guessOrder;\n    this.amountOfTricks = amountOfTricks;\n  }\n}\n","export enum Route {\n  Start,\n  New,\n  Round,\n  Finished\n}\n","const shuffle = (array: any[]) => {\n  let currentIndex = array.length,\n    temporaryValue,\n    randomIndex;\n\n  while (0 !== currentIndex) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n};\n\nexport default shuffle;\n","import { observable, action, computed } from \"mobx\";\n\nimport store from \"../index\";\n\nimport { Player } from \"./Player\";\nimport { Round } from \"./Round\";\n\nimport shuffle from \"../../utils/shuffle\";\nimport { Step } from \"./Round/Step\";\nimport { persist } from \"mobx-persist\";\nimport { Route } from \"../Router/Route\";\n\nconst attack = new Audio(`${process.env.PUBLIC_URL}/audio/attack.mp3`);\n\nconst yeah = new Audio(`${process.env.PUBLIC_URL}/audio/yeah.mp3`);\n\nexport class Game {\n  @observable @persist roundNumber: number = 0;\n  @observable @persist(\"list\") roundHistory: Round[] = [];\n  @observable @persist minTricks: number = 4;\n  @observable @persist maxTricks: number = 8;\n  @observable @persist(\"list\") players: Player[] = [];\n  @observable @persist(\"list\") playerOrder: string[] = [];\n  @observable @persist(\"list\") roundTricks: number[] = [];\n  @observable @persist loopTricksBack: boolean = true;\n  @observable @persist shuffleTricks: boolean = false;\n\n  @action\n  setMinTricks = (tricks: number): void => {\n    if (tricks < 1 || tricks > this.maxTricks) return;\n\n    this.minTricks = tricks;\n  };\n\n  @action\n  setMaxTricks = (tricks: number): void => {\n    if (tricks < this.minTricks) return;\n\n    this.maxTricks = tricks;\n  };\n\n  @action\n  addPlayer = (name: string): void => {\n    const player = new Player(name);\n    this.players.push(player);\n    this.playerOrder.push(player.id);\n  };\n\n  @action\n  removePlayer = (id: string): void => {\n    this.players = this.players.filter(player => player.id !== id);\n    this.playerOrder = this.playerOrder.filter(orderId => orderId !== id);\n  };\n\n  @action\n  toggleLoopTricksBack = (): void => {\n    this.loopTricksBack = !this.loopTricksBack;\n  };\n\n  @action\n  toggleShuffleTricks = (): void => {\n    this.shuffleTricks = !this.shuffleTricks;\n  };\n\n  @action\n  resetGame = (): void => {\n    this.roundNumber = 0;\n    this.roundHistory = [];\n    this.minTricks = 4;\n    this.maxTricks = 8;\n    this.players = [];\n    this.playerOrder = [];\n    this.roundTricks = [];\n    this.loopTricksBack = true;\n    this.shuffleTricks = false;\n\n    store.router.updateRoute(Route.New);\n  };\n\n  @action\n  startGame = (): void => {\n    if (this.players.length < 2) return;\n\n    for (let i = this.minTricks; i <= this.maxTricks; i += 1) {\n      this.roundTricks.push(i);\n    }\n\n    if (this.loopTricksBack) {\n      for (let i = this.maxTricks; i >= this.minTricks; i -= 1) {\n        this.roundTricks.push(i);\n      }\n    }\n\n    if (this.shuffleTricks) {\n      this.roundTricks = shuffle(this.roundTricks);\n    }\n\n    this.playerOrder = shuffle(this.playerOrder);\n    this.nextRound();\n    store.router.updateRoute(Route.Round);\n  };\n\n  @action\n  nextRound = (increment: boolean = true): void => {\n    if (this.roundNumber >= this.roundTricks.length) {\n      yeah.play();\n      store.router.updateRoute(Route.Finished);\n      return;\n    }\n\n    if (increment) this.roundNumber += 1;\n\n    const shuffleOffset: number = (this.roundNumber - 1) % this.players.length;\n    const guessOrder: string[] = [];\n\n    for (let i = 0; i < this.playerOrder.length; i += 1) {\n      const pointer = (i + shuffleOffset) % this.playerOrder.length;\n      guessOrder.push(this.playerOrder[pointer]);\n    }\n\n    const round = new Round(\n      this.roundNumber,\n      guessOrder,\n      this.roundTricks[this.roundNumber - 1]\n    );\n\n    this.roundHistory.push(round);\n  };\n\n  @action\n  resetRound = (): void => {\n    this.roundHistory.pop();\n    this.nextRound(false);\n  };\n\n  @computed get currentRound(): Round {\n    return this.roundHistory[this.roundHistory.length - 1];\n  }\n\n  @action\n  guessTricks = (amount: number) => {\n    if (\n      amount == null ||\n      amount < 0 ||\n      amount > this.currentRound.amountOfTricks\n    ) {\n      return;\n    }\n\n    // The tricks can't exactly be the totalTricks\n    if (this.lastGuess) {\n      // last guess of round\n      if (this.totalTricks + amount === this.currentRound.amountOfTricks) {\n        return;\n      }\n    }\n\n    this.currentRound.guessedTricks.push({\n      playerId: this.currentRound.guessOrder[this.currentRound.guessIndex],\n      amount\n    });\n\n    this.currentRound.guessIndex++;\n\n    if (this.currentRound.guessIndex === this.currentRound.guessOrder.length) {\n      attack.play();\n      this.currentRound.step = Step.Play;\n    }\n  };\n\n  @action\n  setScore = (correct: boolean, tricks: number) => {\n    let calcTricks;\n\n    const guessedTricks = this.currentRound.guessedTricks[\n      this.currentRound.scoreIndex\n    ].amount;\n\n    if (correct) {\n      calcTricks = guessedTricks;\n    } else {\n      if (tricks == null) return;\n      calcTricks = Math.abs(guessedTricks - tricks);\n    }\n\n    this.currentRound.scores.push({\n      playerId: this.currentRound.guessOrder[this.currentRound.scoreIndex],\n      score: correct ? 10 + calcTricks * 2 : calcTricks * 2 * -1\n    });\n\n    this.currentRound.scoreIndex++;\n\n    if (this.currentRound.scoreIndex >= this.currentRound.guessOrder.length) {\n      this.currentRound.step = Step.End;\n    }\n  };\n\n  @action\n  setScores = () => {\n    this.currentRound.step = Step.Score;\n  };\n\n  @computed\n  get totalTricks(): number {\n    return this.currentRound.guessedTricks.reduce(\n      (accumulator, guessedTrick) => accumulator + guessedTrick.amount,\n      0\n    );\n  }\n\n  @computed\n  get lastGuess(): boolean {\n    return (\n      this.currentRound.guessIndex === this.currentRound.guessOrder.length - 1\n    );\n  }\n}\n","import { observable, action } from \"mobx\";\nimport { persist } from \"mobx-persist\";\n\nimport { Route } from \"./Route\";\n\nconst soundtrack = new Audio(`${process.env.PUBLIC_URL}/audio/soundtrack.mp3`);\nsoundtrack.loop = true;\n\nexport class Router {\n  @observable @persist route: Route = Route.Start;\n\n  @action\n  updateRoute = (route: Route) => {\n    if (route === Route.New) {\n      soundtrack.play();\n    } else {\n      soundtrack.pause();\n    }\n\n    this.route = route;\n  };\n}\n","import { observable } from \"mobx\";\n\nimport { create } from \"mobx-persist\";\n\nimport { Game } from \"./Game\";\nimport { Router } from \"./Router\";\n\nclass Store {\n  private hydrate: any;\n\n  @observable public game: Game;\n  @observable public router: Router;\n\n  @observable public loaded: boolean = false;\n\n  constructor() {\n    this.hydrate = create({\n      storage: {\n        setItem: async (key: string, value: string) => {\n          await localStorage.setItem(key, value);\n        },\n        getItem: async (key: string) => {\n          return localStorage.getItem(key);\n        }\n      }\n    });\n\n    this.game = new Game();\n    this.router = new Router();\n\n    this.hydrateStores();\n  }\n\n  hydrateStores = async () => {\n    this.loaded = false;\n\n    await this.hydrate(\"game\", this.game);\n    await this.hydrate(\"router\", this.router);\n\n    this.loaded = true;\n  };\n}\n\nexport default new Store();\n","import React from \"react\";\nimport stores from \"../stores\";\n\nexport const storesContext = React.createContext(stores);\n","import React from \"react\";\nimport { storesContext } from \"../contexts\";\n\nexport const useStores = () => React.useContext(storesContext);\n","import React, { useState } from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { useStores } from \"../../hooks/useStores\";\nimport { Route } from \"../../stores/Router/Route\";\n\nexport const GameNew = observer(() => {\n  const {\n    game: {\n      minTricks,\n      setMinTricks,\n      maxTricks,\n      setMaxTricks,\n      players,\n      addPlayer,\n      removePlayer,\n      startGame,\n      shuffleTricks,\n      toggleShuffleTricks,\n      loopTricksBack,\n      toggleLoopTricksBack\n    },\n    router: { updateRoute }\n  } = useStores();\n  const [name, setName] = useState(\"\");\n\n  const savePlayer = () => {\n    addPlayer(name);\n    setName(\"\");\n  };\n\n  return (\n    <div className=\"card\" style={{ marginTop: \"1rem\" }}>\n      <h5 className=\"card-header\">Nieuw spel</h5>\n      <div className=\"card-body\">\n        <div className=\"row\">\n          <div className=\"col-sm\">\n            <div className=\"input-group mb-3\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"Naam\"\n                value={name}\n                onChange={e => setName(e.target.value)}\n              />\n              <div className=\"input-group-append\">\n                <button\n                  className=\"btn btn-primary\"\n                  type=\"button\"\n                  onClick={savePlayer}\n                >\n                  Toevoegen\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"table-responsive-xl\">\n          <table className=\"table table-striped\">\n            <thead>\n              <tr>\n                <th scope=\"col\" colSpan={2}>\n                  Spelers\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              {players.length ? (\n                players.map(player => (\n                  <tr key={player.id}>\n                    <td>{player.name}</td>\n                    <td style={{ width: \"10%\" }}>\n                      <button\n                        className=\"btn btn-sm btn-danger\"\n                        type=\"button\"\n                        onClick={() => removePlayer(player.id)}\n                      >\n                        Verwijderen\n                      </button>\n                    </td>\n                  </tr>\n                ))\n              ) : (\n                <tr>\n                  <td>Nog geen spelers toegevoegd.</td>\n                </tr>\n              )}\n            </tbody>\n          </table>\n        </div>\n        <div className=\"row\">\n          <div className=\"col\">\n            <div className=\"form-group\">\n              <label htmlFor=\"minTricks\">Minimaal aantal slagen</label>\n              <input\n                type=\"number\"\n                className=\"form-control\"\n                id=\"minTricks\"\n                value={minTricks}\n                onChange={e => setMinTricks(parseInt(e.target.value, 10))}\n              />\n            </div>\n          </div>\n          <div className=\"col\">\n            <div className=\"form-group\">\n              <label htmlFor=\"maxTricks\">Maximaal aantal slagen</label>\n              <input\n                type=\"number\"\n                className=\"form-control\"\n                id=\"maxTricks\"\n                value={maxTricks}\n                onChange={e => setMaxTricks(parseInt(e.target.value, 10))}\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col\">\n            <input\n              name=\"Slagen terugtellen\"\n              type=\"checkbox\"\n              checked={loopTricksBack}\n              onChange={toggleLoopTricksBack}\n            />\n            <label style={{ marginLeft: \"0.5rem\" }}>Slagen terugtellen</label>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col\">\n            <input\n              name=\"Random slagen\"\n              type=\"checkbox\"\n              checked={shuffleTricks}\n              onChange={toggleShuffleTricks}\n            />\n            <label style={{ marginLeft: \"0.5rem\" }}>Random slagen</label>\n          </div>\n        </div>\n        <div className=\"row\" style={{ marginTop: \"1rem\" }}>\n          <div className=\"col\">\n            <button\n              type=\"button\"\n              className=\"btn btn-primary btn-lg btn-block\"\n              onClick={startGame}\n            >\n              Beginnen\n            </button>\n          </div>\n        </div>\n        <button\n          style={{\n            width: \"10rem\",\n            position: \"fixed\",\n            bottom: \"1rem\",\n            left: \"1rem\"\n          }}\n          className=\"btn btn-danger btn-block\"\n          type=\"button\"\n          onClick={() => updateRoute(Route.Start)}\n        >\n          Terug\n        </button>\n      </div>\n    </div>\n  );\n});\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { Game } from \"../../../stores/Game\";\n\ninterface IProps {\n  game: Game;\n}\n\nexport const Scores = observer(({ game }: IProps) => {\n  const {\n    players,\n    currentRound: { scoreIndex, guessOrder, guessedTricks, amountOfTricks },\n    setScore\n  } = game;\n\n  const playerToSetScore = players.find(\n    player => player.id === guessOrder[scoreIndex]\n  );\n\n  const guessedTrick = guessedTricks.find(\n    guessedTrick => guessedTrick.playerId === guessOrder[scoreIndex]\n  );\n\n  if (!playerToSetScore || !guessedTrick) return null;\n\n  return (\n    <>\n      <div className=\"row\" style={{ margin: \"1rem 0\" }}>\n        <div className=\"col\">\n          Behaalde score voor: <b>{playerToSetScore.name}</b>. Verwachte slagen:{\" \"}\n          <b>{guessedTrick.amount}</b>\n        </div>\n      </div>\n      <div className=\"row\" style={{ margin: \"1rem 0\" }}>\n        <div className=\"col\">\n          <b>Behaalde slagen:</b>\n        </div>\n      </div>\n      <div className=\"row\" style={{ margin: \"1rem 0\" }}>\n        <div className=\"col-sm\">\n          <button\n            className=\"btn btn-success btn-lg btn-block\"\n            type=\"button\"\n            onClick={() => setScore(true, 0)}\n          >\n            Goed\n          </button>\n        </div>\n        <div className=\"col-sm\">\n          <div className=\"btn-group btn-block\" role=\"group\">\n            {[...Array(amountOfTricks + 1)].map((v, i) => {\n              if (guessedTrick.amount === i) return null;\n\n              return (\n                <button\n                  type=\"button\"\n                  className={`btn btn-lg btn-danger`}\n                  onClick={() => setScore(false, i)}\n                  key={i}\n                >\n                  {i}\n                </button>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n});\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { Game } from \"../../../stores/Game\";\n\ninterface IProps {\n  game: Game;\n}\n\nexport const ExpectedTricks = observer(({ game }: IProps) => {\n  const {\n    players,\n    currentRound: { guessIndex, guessOrder, amountOfTricks },\n    guessTricks,\n    totalTricks,\n    lastGuess\n  } = game;\n\n  const playerToGuess = players.find(\n    player => player.id === guessOrder[guessIndex]\n  );\n\n  if (!playerToGuess) return null;\n\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"col-sm\">\n          <p className=\"text-left\">\n            Verwachte slagen voor <b>{playerToGuess.name}</b>\n          </p>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-sm\">\n          <div className=\"input-group mb-3\">\n            <div className=\"btn-group btn-block\" role=\"group\">\n              {[...Array(amountOfTricks + 1)].map((v, i) => {\n                if (lastGuess && totalTricks + i === amountOfTricks)\n                  return null;\n                return (\n                  <button\n                    type=\"button\"\n                    className={`btn btn-lg btn-success`}\n                    onClick={() => guessTricks(i)}\n                    key={i}\n                  >\n                    {i}\n                  </button>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n});\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { Step } from \"../../../stores/Game/Round/Step\";\nimport { Game } from \"../../../stores/Game\";\nimport { Scores } from \"./Scores\";\nimport { ExpectedTricks } from \"./ExpectedTricks\";\n\ninterface IProps {\n  game: Game;\n}\n\nexport const RoundStep = observer(({ game }: IProps) => {\n  const {\n    currentRound: { step },\n    setScores,\n    nextRound\n  } = game;\n\n  switch (step) {\n    case Step.Guess:\n      return <ExpectedTricks game={game} />;\n    case Step.Play:\n      return (\n        <button\n          className=\"btn btn-primary btn-block\"\n          type=\"button\"\n          onClick={setScores}\n          style={{ margin: \"1rem 0\" }}\n        >\n          Scores invoeren\n        </button>\n      );\n    case Step.Score:\n      return <Scores game={game} />;\n    case Step.End:\n      return (\n        <button\n          className=\"btn btn-primary btn-block\"\n          type=\"button\"\n          onClick={() => nextRound()}\n          style={{ margin: \"1rem 0\" }}\n        >\n          Volgende ronde\n        </button>\n      );\n  }\n});\n","import React, { Fragment } from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { Round } from \"../stores/Game/Round\";\nimport { Player } from \"../stores/Game/Player\";\n\ninterface IProps {\n  players: Player[];\n  rounds: Round[];\n  reverse: boolean;\n}\n\nexport const ScoreBoard = observer(({ players, rounds, reverse }: IProps) => {\n  return (\n    <div className=\"table-responsive-xl\">\n      <table className=\"table table-striped\">\n        <thead>\n          <tr>\n            <th scope=\"col\">Ronde</th>\n            <th scope=\"col\">Slagen</th>\n            {players.map(player => (\n              <Fragment key={player.id}>\n                <th scope=\"col\">{player.name}</th>\n                <th scope=\"col\">Verwacht</th>\n              </Fragment>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          <RoundRows rounds={rounds} players={players} reverse={reverse} />\n          <TotalRow rounds={rounds} players={players} />\n        </tbody>\n      </table>\n    </div>\n  );\n});\n\nconst RoundRows = observer(({ players, rounds, reverse }: IProps) => {\n  return (\n    <>\n      {(reverse ? [...rounds].reverse() : rounds).map(round => {\n        return (\n          <RoundRow round={round} players={players} key={round.roundNumber} />\n        );\n      })}\n    </>\n  );\n});\n\ninterface RoundRowProps {\n  round: Round;\n  players: Player[];\n}\n\nconst RoundRow = observer(({ round, players }: RoundRowProps) => {\n  const tdStyle = { padding: \"0.25rem 0.75rem\" };\n\n  return (\n    <tr key={round.roundNumber}>\n      <td style={tdStyle}>{round.roundNumber}</td>\n      <td style={tdStyle}>{round.amountOfTricks}</td>\n      {players.map(player => {\n        const guessedTrick = round.guessedTricks.find(\n          guessedTrick => guessedTrick.playerId === player.id\n        );\n\n        if (!round.scores.length || round.scores.length !== players.length) {\n          return (\n            <Fragment key={player.id}>\n              <td style={tdStyle}>-</td>\n              <td style={tdStyle}>\n                {guessedTrick ? guessedTrick.amount : \"-\"}\n              </td>\n            </Fragment>\n          );\n        }\n\n        const score = round.scores.find(score => score.playerId === player.id);\n\n        return (\n          <Fragment key={player.id}>\n            <td style={tdStyle}>{score?.score}</td>\n            <td\n              style={{\n                ...tdStyle,\n                ...(score && score.score < 0 ? { color: \"red\" } : {})\n              }}\n            >\n              {guessedTrick?.amount}\n            </td>\n          </Fragment>\n        );\n      })}\n    </tr>\n  );\n});\n\ninterface TotalRowProps {\n  rounds: Round[];\n  players: Player[];\n}\n\nconst TotalRow = observer(({ rounds, players }: TotalRowProps) => {\n  const totals = new Map();\n\n  rounds.forEach(round => {\n    round.scores.forEach(score => {\n      if (totals.has(score.playerId)) {\n        totals.set(score.playerId, totals.get(score.playerId) + score.score);\n      } else {\n        totals.set(score.playerId, score.score);\n      }\n    });\n  });\n\n  return (\n    <tr>\n      <th colSpan={2}>Totaal</th>\n      {players.map(player => {\n        const score = totals.get(player.id);\n\n        return (\n          <td key={player.id} colSpan={2} className=\"twee\">\n            {score ? score : \"-\"}\n          </td>\n        );\n      })}\n    </tr>\n  );\n});\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { useStores } from \"../../../hooks/useStores\";\nimport { RoundStep } from \"./RoundStep\";\nimport { ScoreBoard } from \"../../ScoreBoard\";\n\nexport const GameRound = observer(() => {\n  const {\n    game,\n    game: {\n      roundNumber,\n      players,\n      roundHistory,\n      resetRound,\n      currentRound: { guessOrder, amountOfTricks },\n      resetGame\n    }\n  } = useStores();\n\n  const playerToShuffle = players.find(\n    player => player.id === guessOrder[players.length - 1]\n  );\n\n  const reset = () => {\n    const confirmed: boolean = window.confirm(\"Herstarten?\");\n\n    if (confirmed) {\n      resetGame();\n    }\n  };\n\n  if (!playerToShuffle) return null;\n\n  return (\n    <div className=\"card\" style={{ marginTop: \"1rem\" }}>\n      <h5 className=\"card-header\">\n        Ronde {roundNumber} - Aantal slagen <b>{amountOfTricks}</b>\n      </h5>\n      <div className=\"card-body\">\n        <div className=\"row\">\n          <div className=\"col\">\n            <b>{playerToShuffle.name}</b> moet deze ronde schudden\n          </div>\n        </div>\n        <hr />\n        <RoundStep game={game} />\n        <div className=\"row\">\n          <div className=\"col\">\n            <ScoreBoard\n              rounds={roundHistory}\n              players={players}\n              reverse={true}\n            />\n          </div>\n        </div>\n        <hr />\n        <div className=\"row\">\n          <div className=\"col\">\n            <button\n              className=\"btn btn-danger btn-block\"\n              type=\"button\"\n              onClick={resetRound}\n            >\n              Herstart ronde\n            </button>\n          </div>\n        </div>\n        <button\n          style={{\n            width: \"10rem\",\n            position: \"fixed\",\n            bottom: \"1rem\",\n            left: \"1rem\"\n          }}\n          className=\"btn btn-danger btn-block\"\n          type=\"button\"\n          onClick={reset}\n        >\n          Stoppen\n        </button>\n      </div>\n    </div>\n  );\n});\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { useStores } from \"../../hooks/useStores\";\nimport { ScoreBoard } from \"../ScoreBoard\";\n\nexport const GameFinished = observer(() => {\n  const {\n    game: { players, roundHistory, resetGame }\n  } = useStores();\n\n  return (\n    <div className=\"card\" style={{ marginTop: \"1rem\" }}>\n      <h5 className=\"card-header\">Klaar!</h5>\n      <div className=\"card-body\">\n        <ScoreBoard players={players} rounds={roundHistory} reverse={false} />\n        <div className=\"row\">\n          <div className=\"col\">\n            <button\n              className=\"btn btn-success btn-block\"\n              type=\"button\"\n              onClick={resetGame}\n            >\n              Nieuw spel\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n});\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { useStores } from \"../../hooks/useStores\";\nimport { Route } from \"../../stores/Router/Route\";\n\nexport const GameStart = observer(() => {\n  const {\n    router: { updateRoute }\n  } = useStores();\n\n  return (\n    <div className=\"card\" style={{ marginTop: \"1rem\" }}>\n      <h5 className=\"card-header\">Boeren Bridge</h5>\n      <div className=\"card-body\">\n        <div className=\"row\">\n          <div className=\"col\">\n            <button\n              className=\"btn btn-success btn-block\"\n              type=\"button\"\n              onClick={() => updateRoute(Route.New)}\n            >\n              Nieuw spel\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n});\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { useStores } from \"../hooks/useStores\";\nimport { GameNew } from \"./pages/GameNew\";\nimport { GameRound } from \"./pages/GameRound\";\nimport { GameFinished } from \"./pages/GameFinished\";\nimport { Route } from \"../stores/Router/Route\";\nimport { GameStart } from \"./pages/GameStart\";\n\nconst App: React.FC = observer(() => {\n  const {\n    loaded,\n    router: { route }\n  } = useStores();\n\n  let page;\n\n  if (!loaded) {\n    return null;\n  }\n\n  switch (route) {\n    case Route.Start:\n      page = <GameStart />;\n      break;\n    case Route.New:\n      page = <GameNew />;\n      break;\n    case Route.Round:\n      page = <GameRound />;\n      break;\n    case Route.Finished:\n      page = <GameFinished />;\n      break;\n  }\n\n  return <div className=\"container\">{page}</div>;\n});\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"./styles/theme.scss\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}