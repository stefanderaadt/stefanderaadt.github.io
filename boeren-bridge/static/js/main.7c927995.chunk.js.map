{"version":3,"sources":["stores/Game/Round/Step.ts","stores/Game/Player.ts","stores/Game/Round/index.ts","utils/shuffle.ts","stores/Game/index.ts","stores/Router.ts","stores/index.ts","contexts/index.tsx","hooks/useStores.tsx","components/pages/GameNew.tsx","components/pages/GameRound/Scores.tsx","components/pages/GameRound/ExpectedTricks.tsx","components/pages/GameRound/RoundStep.tsx","components/ScoreBoard.tsx","components/pages/GameRound/index.tsx","components/pages/GameFinished.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["Step","Player","name","this","id","uuidV1","observable","Round","persist","roundNumber","guessOrder","amountOfTricks","Guess","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","attack","Audio","process","yeah","Game","roundHistory","currentRound","guessedTricks","reduce","accumulator","guessedTrick","amount","guessIndex","action","tricks","maxTricks","minTricks","player","players","push","playerOrder","filter","orderId","store","router","updateRoute","i","roundTricks","loopTricksBack","nextRound","increment","play","shuffleOffset","pointer","round","pop","computed","lastGuess","totalTricks","playerId","step","Play","correct","calcTricks","scoreIndex","abs","scores","score","End","Score","Router","route","hydrate","create","game","storesContext","React","createContext","stores","useStores","useContext","GameNew","observer","setMinTricks","setMaxTricks","addPlayer","removePlayer","startGame","useState","setName","className","style","marginTop","type","placeholder","value","onChange","e","target","onClick","scope","colSpan","map","key","width","htmlFor","parseInt","Scores","setScore","playerToSetScore","find","margin","role","Array","v","ExpectedTricks","guessTricks","playerToGuess","RoundStep","setScores","ScoreBoard","rounds","reverse","RoundRow","TotalRow","tdStyle","padding","color","totals","Map","forEach","has","set","get","GameRound","resetRound","playerToShuffle","GameFinished","resetGame","App","page","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7c927995.chunk.js","sourcesContent":["export enum Step {\n  Guess,\n  Play,\n  Score,\n  End\n}\n","import { observable } from \"mobx\";\nimport { v1 as uuidV1 } from \"uuid\";\n\nexport class Player {\n  @observable id: string;\n  @observable name: string;\n\n  constructor(name: string) {\n    this.name = name;\n    this.id = uuidV1();\n  }\n}\n","import { observable } from \"mobx\";\n\nimport { GuessedTricks } from \"./GuessedTricks\";\nimport { Score } from \"./Score\";\nimport { Step } from \"./Step\";\nimport { persist } from \"mobx-persist\";\n\nexport class Round {\n  @observable @persist roundNumber: number;\n  @observable @persist(\"list\") guessOrder: string[];\n  @observable @persist amountOfTricks: number;\n\n  @observable @persist step: Step = Step.Guess;\n\n  @observable @persist guessIndex: number = 0;\n  @observable @persist(\"list\") guessedTricks: GuessedTricks[] = [];\n\n  @observable @persist scoreIndex: number = 0;\n  @observable @persist scores: Score[] = [];\n\n  constructor(\n    roundNumber: number,\n    guessOrder: string[],\n    amountOfTricks: number\n  ) {\n    this.roundNumber = roundNumber;\n    this.guessOrder = guessOrder;\n    this.amountOfTricks = amountOfTricks;\n  }\n}\n","const shuffle = (array: any[]) => {\n  let currentIndex = array.length,\n    temporaryValue,\n    randomIndex;\n\n  while (0 !== currentIndex) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n};\n\nexport default shuffle;\n","import { observable, action, computed } from \"mobx\";\n\nimport store from \"../index\";\n\nimport { Player } from \"./Player\";\nimport { Round } from \"./Round\";\n\nimport shuffle from \"../../utils/shuffle\";\nimport { Step } from \"./Round/Step\";\nimport { persist } from \"mobx-persist\";\n\nconst attack = new Audio(`${process.env.PUBLIC_URL}/audio/attack.mp3`);\n\nconst yeah = new Audio(`${process.env.PUBLIC_URL}/audio/yeah.mp3`);\n\nexport class Game {\n  @observable @persist roundNumber: number = 0;\n  @observable @persist(\"list\") roundHistory: Round[] = [];\n  @observable @persist minTricks: number = 1;\n  @observable @persist maxTricks: number = 10;\n  @observable @persist(\"list\") players: Player[] = [];\n  @observable @persist(\"list\") playerOrder: string[] = [];\n  @observable @persist(\"list\") roundTricks: number[] = [];\n  @observable @persist loopTricksBack: boolean = true;\n\n  @action\n  setMinTricks = (tricks: number): void => {\n    if (tricks < 1 || tricks > this.maxTricks) return;\n\n    this.minTricks = tricks;\n  };\n\n  @action\n  setMaxTricks = (tricks: number): void => {\n    if (tricks < this.minTricks) return;\n\n    this.maxTricks = tricks;\n  };\n\n  @action\n  addPlayer = (name: string): void => {\n    const player = new Player(name);\n    this.players.push(player);\n    this.playerOrder.push(player.id);\n  };\n\n  @action\n  removePlayer = (id: string): void => {\n    this.players = this.players.filter(player => player.id !== id);\n    this.playerOrder = this.playerOrder.filter(orderId => orderId !== id);\n  };\n\n  @action\n  resetGame = (): void => {\n    this.roundNumber = 0;\n    this.roundHistory = [];\n    this.minTricks = 1;\n    this.maxTricks = 10;\n    this.players = [];\n    this.playerOrder = [];\n\n    store.router.updateRoute(\"new\");\n  };\n\n  @action\n  startGame = (): void => {\n    if (this.players.length < 2) return;\n\n    for (let i = this.minTricks; i <= this.maxTricks; i += 1) {\n      this.roundTricks.push(i);\n    }\n\n    if (this.loopTricksBack) {\n      for (let i = this.maxTricks; i >= this.minTricks; i -= 1) {\n        this.roundTricks.push(i);\n      }\n    }\n\n    this.playerOrder = shuffle(this.playerOrder);\n    this.nextRound();\n    store.router.updateRoute(\"round\");\n  };\n\n  @action\n  nextRound = (increment: boolean = true): void => {\n    if (this.roundNumber >= this.roundTricks.length) {\n      yeah.play();\n      store.router.updateRoute(\"finished\");\n      return;\n    }\n\n    attack.play();\n\n    if (increment) this.roundNumber += 1;\n\n    const shuffleOffset: number = (this.roundNumber - 1) % this.players.length;\n    const guessOrder: string[] = [];\n\n    for (let i = 0; i < this.playerOrder.length; i += 1) {\n      const pointer = (i + shuffleOffset) % this.playerOrder.length;\n      guessOrder.push(this.playerOrder[pointer]);\n    }\n\n    const round = new Round(\n      this.roundNumber,\n      guessOrder,\n      this.roundTricks[this.roundNumber - 1]\n    );\n\n    this.roundHistory.push(round);\n  };\n\n  @action\n  resetRound = (): void => {\n    this.roundHistory.pop();\n    this.nextRound(false);\n  };\n\n  @computed get currentRound(): Round {\n    return this.roundHistory[this.roundHistory.length - 1];\n  }\n\n  @action\n  guessTricks = (amount: number) => {\n    if (\n      amount == null ||\n      amount < 0 ||\n      amount > this.currentRound.amountOfTricks\n    ) {\n      return;\n    }\n\n    // The tricks can't exactly be the totalTricks\n    if (this.lastGuess) {\n      // last guess of round\n      if (this.totalTricks + amount === this.currentRound.amountOfTricks) {\n        return;\n      }\n    }\n\n    this.currentRound.guessedTricks.push({\n      playerId: this.currentRound.guessOrder[this.currentRound.guessIndex],\n      amount\n    });\n\n    this.currentRound.guessIndex++;\n\n    if (this.currentRound.guessIndex === this.currentRound.guessOrder.length) {\n      this.currentRound.step = Step.Play;\n    }\n  };\n\n  @action\n  setScore = (correct: boolean, tricks: number) => {\n    let calcTricks;\n\n    const guessedTricks = this.currentRound.guessedTricks[\n      this.currentRound.scoreIndex\n    ].amount;\n\n    if (correct) {\n      calcTricks = guessedTricks;\n    } else {\n      if (tricks == null) return;\n      calcTricks = Math.abs(guessedTricks - tricks);\n    }\n\n    this.currentRound.scores.push({\n      playerId: this.currentRound.guessOrder[this.currentRound.scoreIndex],\n      score: correct ? 10 + calcTricks * 2 : calcTricks * 2 * -1\n    });\n\n    this.currentRound.scoreIndex++;\n\n    if (this.currentRound.scoreIndex >= this.currentRound.guessOrder.length) {\n      this.currentRound.step = Step.End;\n    }\n  };\n\n  @action\n  setScores = () => {\n    this.currentRound.step = Step.Score;\n  };\n\n  @computed\n  get totalTricks(): number {\n    return this.currentRound.guessedTricks.reduce(\n      (accumulator, guessedTrick) => accumulator + guessedTrick.amount,\n      0\n    );\n  }\n\n  @computed\n  get lastGuess(): boolean {\n    return (\n      this.currentRound.guessIndex === this.currentRound.guessOrder.length - 1\n    );\n  }\n}\n","import { observable, action } from \"mobx\";\nimport { persist } from \"mobx-persist\";\n\nexport class Router {\n  @observable @persist route: string = \"new\";\n\n  @action\n  updateRoute = (route: string) => {\n    this.route = route;\n  };\n}\n","import { observable } from \"mobx\";\n\nimport { create } from \"mobx-persist\";\n\nimport { Game } from \"./Game\";\nimport { Router } from \"./Router\";\n\nconst hydrate = create();\n\nclass Store {\n  @observable public game: Game;\n  @observable public router: Router;\n\n  constructor() {\n    this.game = new Game();\n    this.router = new Router();\n    hydrate(\"game\", this.game);\n    hydrate(\"router\", this.router);\n  }\n}\n\nexport default new Store();\n","import React from \"react\";\nimport stores from \"../stores\";\n\nexport const storesContext = React.createContext(stores);\n","import React from \"react\";\nimport { storesContext } from \"../contexts\";\n\nexport const useStores = () => React.useContext(storesContext);\n","import React, { useState } from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { useStores } from \"../../hooks/useStores\";\n\nexport const GameNew = observer(() => {\n  const {\n    game: {\n      minTricks,\n      setMinTricks,\n      maxTricks,\n      setMaxTricks,\n      players,\n      addPlayer,\n      removePlayer,\n      startGame\n    }\n  } = useStores();\n  const [name, setName] = useState(\"\");\n\n  const savePlayer = () => {\n    addPlayer(name);\n    setName(\"\");\n  };\n\n  return (\n    <div className=\"card\" style={{ marginTop: \"1rem\" }}>\n      <h5 className=\"card-header\">Nieuw spel</h5>\n      <div className=\"card-body\">\n        <div className=\"row\">\n          <div className=\"col-sm\">\n            <div className=\"input-group mb-3\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"Naam\"\n                value={name}\n                onChange={e => setName(e.target.value)}\n              />\n              <div className=\"input-group-append\">\n                <button\n                  className=\"btn btn-primary\"\n                  type=\"button\"\n                  onClick={savePlayer}\n                >\n                  Toevoegen\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"table-responsive-xl\">\n          <table className=\"table table-striped\">\n            <thead>\n              <tr>\n                <th scope=\"col\" colSpan={2}>\n                  Spelers\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              {players.length ? (\n                players.map(player => (\n                  <tr key={player.id}>\n                    <td>{player.name}</td>\n                    <td style={{ width: \"10%\" }}>\n                      <button\n                        className=\"btn btn-sm btn-danger\"\n                        type=\"button\"\n                        onClick={() => removePlayer(player.id)}\n                      >\n                        Verwijderen\n                      </button>\n                    </td>\n                  </tr>\n                ))\n              ) : (\n                <tr>\n                  <td>Nog geen spelers toegevoegd.</td>\n                </tr>\n              )}\n            </tbody>\n          </table>\n        </div>\n        <div className=\"row\">\n          <div className=\"col\">\n            <div className=\"form-group\">\n              <label htmlFor=\"minTricks\">Minimaal aantal slagen</label>\n              <input\n                type=\"number\"\n                className=\"form-control\"\n                id=\"minTricks\"\n                value={minTricks}\n                onChange={e => setMinTricks(parseInt(e.target.value, 10))}\n              />\n            </div>\n          </div>\n          <div className=\"col\">\n            <div className=\"form-group\">\n              <label htmlFor=\"maxTricks\">Maximaal aantal slagen</label>\n              <input\n                type=\"number\"\n                className=\"form-control\"\n                id=\"maxTricks\"\n                value={maxTricks}\n                onChange={e => setMaxTricks(parseInt(e.target.value, 10))}\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col\">\n            <button\n              type=\"button\"\n              className=\"btn btn-primary btn-lg btn-block\"\n              onClick={startGame}\n            >\n              Beginnen\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n});\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { Game } from \"../../../stores/Game\";\n\ninterface IProps {\n  game: Game;\n}\n\nexport const Scores = observer(({ game }: IProps) => {\n  const {\n    players,\n    currentRound: { scoreIndex, guessOrder, guessedTricks, amountOfTricks },\n    setScore\n  } = game;\n\n  const playerToSetScore = players.find(\n    player => player.id === guessOrder[scoreIndex]\n  );\n\n  const guessedTrick = guessedTricks.find(\n    guessedTrick => guessedTrick.playerId === guessOrder[scoreIndex]\n  );\n\n  if (!playerToSetScore || !guessedTrick) return null;\n\n  return (\n    <>\n      <div className=\"row\" style={{ margin: \"1rem 0\" }}>\n        <div className=\"col\">\n          Behaalde score voor: <b>{playerToSetScore.name}</b>. Verwachte slagen:{\" \"}\n          <b>{guessedTrick.amount}</b>\n        </div>\n      </div>\n      <div className=\"row\" style={{ margin: \"1rem 0\" }}>\n        <div className=\"col\">\n          <b>Behaalde slagen:</b>\n        </div>\n      </div>\n      <div className=\"row\" style={{ margin: \"1rem 0\" }}>\n        <div className=\"col-sm\">\n          <button\n            className=\"btn btn-success btn-lg btn-block\"\n            type=\"button\"\n            onClick={() => setScore(true, 0)}\n          >\n            Goed\n          </button>\n        </div>\n        <div className=\"col-sm\">\n          <div className=\"btn-group btn-block\" role=\"group\">\n            {[...Array(amountOfTricks + 1)].map((v, i) => {\n              if (guessedTrick.amount === i) return null;\n\n              return (\n                <button\n                  type=\"button\"\n                  className={`btn btn-lg btn-danger`}\n                  onClick={() => setScore(false, i)}\n                  key={i}\n                >\n                  {i}\n                </button>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n});\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { Game } from \"../../../stores/Game\";\n\ninterface IProps {\n  game: Game;\n}\n\nexport const ExpectedTricks = observer(({ game }: IProps) => {\n  const {\n    players,\n    currentRound: { guessIndex, guessOrder, amountOfTricks },\n    guessTricks,\n    totalTricks,\n    lastGuess\n  } = game;\n\n  const playerToGuess = players.find(\n    player => player.id === guessOrder[guessIndex]\n  );\n\n  if (!playerToGuess) return null;\n\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"col-sm\">\n          <p className=\"text-left\">\n            Verwachte slagen voor <b>{playerToGuess.name}</b>\n          </p>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-sm\">\n          <div className=\"input-group mb-3\">\n            <div className=\"btn-group btn-block\" role=\"group\">\n              {[...Array(amountOfTricks + 1)].map((v, i) => {\n                if (lastGuess && totalTricks + i === amountOfTricks)\n                  return null;\n                return (\n                  <button\n                    type=\"button\"\n                    className={`btn btn-lg btn-success`}\n                    onClick={() => guessTricks(i)}\n                    key={i}\n                  >\n                    {i}\n                  </button>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n});\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { Step } from \"../../../stores/Game/Round/Step\";\nimport { Game } from \"../../../stores/Game\";\nimport { Scores } from \"./Scores\";\nimport { ExpectedTricks } from \"./ExpectedTricks\";\n\ninterface IProps {\n  game: Game;\n}\n\nexport const RoundStep = observer(({ game }: IProps) => {\n  const {\n    currentRound: { step },\n    setScores,\n    nextRound\n  } = game;\n\n  switch (step) {\n    case Step.Guess:\n      return <ExpectedTricks game={game} />;\n    case Step.Play:\n      return (\n        <button\n          className=\"btn btn-primary btn-block\"\n          type=\"button\"\n          onClick={setScores}\n          style={{ margin: \"1rem 0\" }}\n        >\n          Scores invoeren\n        </button>\n      );\n    case Step.Score:\n      return <Scores game={game} />;\n    case Step.End:\n      return (\n        <button\n          className=\"btn btn-primary btn-block\"\n          type=\"button\"\n          onClick={() => nextRound()}\n          style={{ margin: \"1rem 0\" }}\n        >\n          Volgende ronde\n        </button>\n      );\n  }\n});\n","import React, { Fragment } from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { Round } from \"../stores/Game/Round\";\nimport { Player } from \"../stores/Game/Player\";\n\ninterface IProps {\n  players: Player[];\n  rounds: Round[];\n  reverse: boolean;\n}\n\nexport const ScoreBoard = observer(({ players, rounds, reverse }: IProps) => {\n  return (\n    <div className=\"table-responsive-xl\">\n      <table className=\"table table-striped\">\n        <thead>\n          <tr>\n            <th scope=\"col\">Ronde</th>\n            <th scope=\"col\">Slagen</th>\n            {players.map(player => (\n              <Fragment key={player.id}>\n                <th scope=\"col\">{player.name}</th>\n                <th scope=\"col\">Verwacht</th>\n              </Fragment>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {(reverse ? [...rounds].reverse() : rounds).map(round => (\n            <RoundRow round={round} players={players} key={round.roundNumber} />\n          ))}\n          <TotalRow rounds={rounds} players={players} />\n        </tbody>\n      </table>\n    </div>\n  );\n});\n\ninterface RoundRowProps {\n  round: Round;\n  players: Player[];\n}\n\nconst RoundRow = observer(({ round, players }: RoundRowProps) => {\n  const tdStyle = { padding: \"0.25rem 0.75rem\" };\n\n  return (\n    <tr key={round.roundNumber}>\n      <td style={tdStyle}>{round.roundNumber}</td>\n      <td style={tdStyle}>{round.amountOfTricks}</td>\n      {players.map(player => {\n        const guessedTrick = round.guessedTricks.find(\n          guessedTrick => guessedTrick.playerId === player.id\n        );\n\n        if (!round.scores.length || round.scores.length !== players.length) {\n          return (\n            <Fragment key={player.id}>\n              <td style={tdStyle}>-</td>\n              <td style={tdStyle}>\n                {guessedTrick ? guessedTrick.amount : \"-\"}\n              </td>\n            </Fragment>\n          );\n        }\n\n        const score = round.scores.find(score => score.playerId === player.id);\n\n        return (\n          <Fragment key={player.id}>\n            <td style={tdStyle}>{score?.score}</td>\n            <td\n              style={{\n                ...tdStyle,\n                ...(score && score.score < 0 ? { color: \"red\" } : {})\n              }}\n            >\n              {guessedTrick?.amount}\n            </td>\n          </Fragment>\n        );\n      })}\n    </tr>\n  );\n});\n\ninterface TotalRowProps {\n  rounds: Round[];\n  players: Player[];\n}\n\nconst TotalRow = observer(({ rounds, players }: TotalRowProps) => {\n  const totals = new Map();\n\n  rounds.forEach(round => {\n    round.scores.forEach(score => {\n      if (totals.has(score.playerId)) {\n        totals.set(score.playerId, totals.get(score.playerId) + score.score);\n      } else {\n        totals.set(score.playerId, score.score);\n      }\n    });\n  });\n\n  return (\n    <tr>\n      <th colSpan={2}>Totaal</th>\n      {players.map(player => {\n        const score = totals.get(player.id);\n\n        return (\n          <td key={player.id} colSpan={2} className=\"twee\">\n            {score ? score : \"-\"}\n          </td>\n        );\n      })}\n    </tr>\n  );\n});\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { useStores } from \"../../../hooks/useStores\";\nimport { RoundStep } from \"./RoundStep\";\nimport { ScoreBoard } from \"../../ScoreBoard\";\n\nexport const GameRound = observer(() => {\n  const {\n    game,\n    game: {\n      roundNumber,\n      players,\n      roundHistory,\n      resetRound,\n      currentRound: { guessOrder, amountOfTricks }\n    }\n  } = useStores();\n\n  const playerToShuffle = players.find(\n    player => player.id === guessOrder[players.length - 1]\n  );\n\n  if (!playerToShuffle) return null;\n\n  return (\n    <div className=\"card\" style={{ marginTop: \"1rem\" }}>\n      <h5 className=\"card-header\">\n        Ronde {roundNumber} - Aantal slagen <b>{amountOfTricks}</b>\n      </h5>\n      <div className=\"card-body\">\n        <div className=\"row\">\n          <div className=\"col\">\n            <b>{playerToShuffle.name}</b> moet deze ronde schudden\n          </div>\n        </div>\n        <hr />\n        <RoundStep game={game} />\n        <div className=\"row\">\n          <div className=\"col\">\n            <ScoreBoard\n              rounds={roundHistory}\n              players={players}\n              reverse={true}\n            />\n          </div>\n        </div>\n        <hr />\n        <div className=\"row\">\n          <div className=\"col\">\n            <button\n              className=\"btn btn-danger btn-block\"\n              type=\"button\"\n              onClick={resetRound}\n            >\n              Herstart ronde\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n});\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { useStores } from \"../../hooks/useStores\";\nimport { ScoreBoard } from \"../ScoreBoard\";\n\nexport const GameFinished = observer(() => {\n  const {\n    game: { players, roundHistory, resetGame }\n  } = useStores();\n\n  return (\n    <div className=\"card\" style={{ marginTop: \"1rem\" }}>\n      <h5 className=\"card-header\">Klaar!</h5>\n      <div className=\"card-body\">\n        <ScoreBoard players={players} rounds={roundHistory} reverse={false} />\n        <div className=\"row\">\n          <div className=\"col\">\n            <button\n              className=\"btn btn-success btn-block\"\n              type=\"button\"\n              onClick={resetGame}\n            >\n              Nieuw spel\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n});\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\n\nimport { useStores } from \"../hooks/useStores\";\nimport { GameNew } from \"./pages/GameNew\";\nimport { GameRound } from \"./pages/GameRound\";\nimport { GameFinished } from \"./pages/GameFinished\";\n\nconst App: React.FC = observer(() => {\n  const {\n    router: { route }\n  } = useStores();\n\n  let page;\n\n  switch (route) {\n    case \"new\":\n      page = <GameNew />;\n      break;\n    case \"round\":\n      page = <GameRound />;\n      break;\n    case \"finished\":\n      page = <GameFinished />;\n      break;\n  }\n\n  return <div className=\"container\">{page}</div>;\n});\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"./styles/theme.scss\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}